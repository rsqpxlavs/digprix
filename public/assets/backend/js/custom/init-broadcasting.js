/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 182);
/******/ })
/************************************************************************/
/******/ ({

/***/ 182:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(183);


/***/ }),

/***/ 183:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _laravelEcho = __webpack_require__(184);\n\nvar _laravelEcho2 = _interopRequireDefault(_laravelEcho);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.Pusher = __webpack_require__(185);\n\nwindow.Echo = new _laravelEcho2.default({\n    broadcaster: 'pusher',\n    key: 'c3189996e679f97c2505',\n    cluster: 'ap2',\n    encrypted: true\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2JhY2tlbmQvanMvYnJvYWRjYXN0L2luaXQtYnJvYWRjYXN0aW5nLmpzPzU2MmEiXSwibmFtZXMiOlsid2luZG93IiwiUHVzaGVyIiwicmVxdWlyZSIsIkVjaG8iLCJicm9hZGNhc3RlciIsImtleSIsImNsdXN0ZXIiLCJlbmNyeXB0ZWQiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBQSxPQUFPQyxNQUFQLEdBQWdCLG1CQUFBQyxDQUFRLEdBQVIsQ0FBaEI7O0FBRUFGLE9BQU9HLElBQVAsR0FBYywwQkFBUztBQUNuQkMsaUJBQWEsUUFETTtBQUVuQkMsU0FBSyxzQkFGYztBQUduQkMsYUFBUyxLQUhVO0FBSW5CQyxlQUFXO0FBSlEsQ0FBVCxDQUFkIiwiZmlsZSI6IjE4My5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFY2hvIGZyb20gXCJsYXJhdmVsLWVjaG9cIjtcclxuXHJcbndpbmRvdy5QdXNoZXIgPSByZXF1aXJlKCdwdXNoZXItanMnKTtcclxuXHJcbndpbmRvdy5FY2hvID0gbmV3IEVjaG8oe1xyXG4gICAgYnJvYWRjYXN0ZXI6ICdwdXNoZXInLFxyXG4gICAga2V5OiAnYzMxODk5OTZlNjc5Zjk3YzI1MDUnLFxyXG4gICAgY2x1c3RlcjogJ2FwMicsXHJcbiAgICBlbmNyeXB0ZWQ6IHRydWVcclxufSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvYmFja2VuZC9qcy9icm9hZGNhc3QvaW5pdC1icm9hZGNhc3RpbmcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///183\n");

/***/ }),

/***/ 184:
/***/ (function(module, exports) {

eval("var asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function (fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Connector = function () {\n    function Connector(options) {\n        classCallCheck(this, Connector);\n\n        this._defaultOptions = {\n            auth: {\n                headers: {}\n            },\n            authEndpoint: '/broadcasting/auth',\n            broadcaster: 'pusher',\n            csrfToken: null,\n            host: null,\n            key: null,\n            namespace: 'App.Events'\n        };\n        this.setOptions(options);\n        this.connect();\n    }\n\n    createClass(Connector, [{\n        key: 'setOptions',\n        value: function setOptions(options) {\n            this.options = _extends(this._defaultOptions, options);\n            if (this.csrfToken()) {\n                this.options.auth.headers['X-CSRF-TOKEN'] = this.csrfToken();\n            }\n            return options;\n        }\n    }, {\n        key: 'csrfToken',\n        value: function csrfToken() {\n            var selector = void 0;\n            if (typeof window !== 'undefined' && window['Laravel'] && window['Laravel'].csrfToken) {\n                return window['Laravel'].csrfToken;\n            } else if (this.options.csrfToken) {\n                return this.options.csrfToken;\n            } else if (typeof document !== 'undefined' && (selector = document.querySelector('meta[name=\"csrf-token\"]'))) {\n                return selector.getAttribute('content');\n            }\n            return null;\n        }\n    }]);\n    return Connector;\n}();\n\nvar Channel = function () {\n    function Channel() {\n        classCallCheck(this, Channel);\n    }\n\n    createClass(Channel, [{\n        key: 'notification',\n        value: function notification(callback) {\n            return this.listen('.Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated', callback);\n        }\n    }, {\n        key: 'listenForWhisper',\n        value: function listenForWhisper(event, callback) {\n            return this.listen('.client-' + event, callback);\n        }\n    }]);\n    return Channel;\n}();\n\nvar EventFormatter = function () {\n    function EventFormatter(namespace) {\n        classCallCheck(this, EventFormatter);\n\n        this.setNamespace(namespace);\n    }\n\n    createClass(EventFormatter, [{\n        key: 'format',\n        value: function format(event) {\n            if (event.charAt(0) === '.' || event.charAt(0) === '\\\\') {\n                return event.substr(1);\n            } else if (this.namespace) {\n                event = this.namespace + '.' + event;\n            }\n            return event.replace(/\\./g, '\\\\');\n        }\n    }, {\n        key: 'setNamespace',\n        value: function setNamespace(value) {\n            this.namespace = value;\n        }\n    }]);\n    return EventFormatter;\n}();\n\nvar PusherChannel = function (_Channel) {\n    inherits(PusherChannel, _Channel);\n\n    function PusherChannel(pusher, name, options) {\n        classCallCheck(this, PusherChannel);\n\n        var _this = possibleConstructorReturn(this, (PusherChannel.__proto__ || Object.getPrototypeOf(PusherChannel)).call(this));\n\n        _this.name = name;\n        _this.pusher = pusher;\n        _this.options = options;\n        _this.eventFormatter = new EventFormatter(_this.options.namespace);\n        _this.subscribe();\n        return _this;\n    }\n\n    createClass(PusherChannel, [{\n        key: 'subscribe',\n        value: function subscribe() {\n            this.subscription = this.pusher.subscribe(this.name);\n        }\n    }, {\n        key: 'unsubscribe',\n        value: function unsubscribe() {\n            this.pusher.unsubscribe(this.name);\n        }\n    }, {\n        key: 'listen',\n        value: function listen(event, callback) {\n            this.on(this.eventFormatter.format(event), callback);\n            return this;\n        }\n    }, {\n        key: 'stopListening',\n        value: function stopListening(event) {\n            this.subscription.unbind(this.eventFormatter.format(event));\n            return this;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, callback) {\n            this.subscription.bind(event, callback);\n            return this;\n        }\n    }]);\n    return PusherChannel;\n}(Channel);\n\nvar PusherPrivateChannel = function (_PusherChannel) {\n    inherits(PusherPrivateChannel, _PusherChannel);\n\n    function PusherPrivateChannel() {\n        classCallCheck(this, PusherPrivateChannel);\n        return possibleConstructorReturn(this, (PusherPrivateChannel.__proto__ || Object.getPrototypeOf(PusherPrivateChannel)).apply(this, arguments));\n    }\n\n    createClass(PusherPrivateChannel, [{\n        key: 'whisper',\n        value: function whisper(eventName, data) {\n            this.pusher.channels.channels[this.name].trigger('client-' + eventName, data);\n            return this;\n        }\n    }]);\n    return PusherPrivateChannel;\n}(PusherChannel);\n\nvar PusherPresenceChannel = function (_PusherChannel) {\n    inherits(PusherPresenceChannel, _PusherChannel);\n\n    function PusherPresenceChannel() {\n        classCallCheck(this, PusherPresenceChannel);\n        return possibleConstructorReturn(this, (PusherPresenceChannel.__proto__ || Object.getPrototypeOf(PusherPresenceChannel)).apply(this, arguments));\n    }\n\n    createClass(PusherPresenceChannel, [{\n        key: 'here',\n        value: function here(callback) {\n            this.on('pusher:subscription_succeeded', function (data) {\n                callback(Object.keys(data.members).map(function (k) {\n                    return data.members[k];\n                }));\n            });\n            return this;\n        }\n    }, {\n        key: 'joining',\n        value: function joining(callback) {\n            this.on('pusher:member_added', function (member) {\n                callback(member.info);\n            });\n            return this;\n        }\n    }, {\n        key: 'leaving',\n        value: function leaving(callback) {\n            this.on('pusher:member_removed', function (member) {\n                callback(member.info);\n            });\n            return this;\n        }\n    }, {\n        key: 'whisper',\n        value: function whisper(eventName, data) {\n            this.pusher.channels.channels[this.name].trigger('client-' + eventName, data);\n            return this;\n        }\n    }]);\n    return PusherPresenceChannel;\n}(PusherChannel);\n\nvar SocketIoChannel = function (_Channel) {\n    inherits(SocketIoChannel, _Channel);\n\n    function SocketIoChannel(socket, name, options) {\n        classCallCheck(this, SocketIoChannel);\n\n        var _this = possibleConstructorReturn(this, (SocketIoChannel.__proto__ || Object.getPrototypeOf(SocketIoChannel)).call(this));\n\n        _this.events = {};\n        _this.name = name;\n        _this.socket = socket;\n        _this.options = options;\n        _this.eventFormatter = new EventFormatter(_this.options.namespace);\n        _this.subscribe();\n        _this.configureReconnector();\n        return _this;\n    }\n\n    createClass(SocketIoChannel, [{\n        key: 'subscribe',\n        value: function subscribe() {\n            this.socket.emit('subscribe', {\n                channel: this.name,\n                auth: this.options.auth || {}\n            });\n        }\n    }, {\n        key: 'unsubscribe',\n        value: function unsubscribe() {\n            this.unbind();\n            this.socket.emit('unsubscribe', {\n                channel: this.name,\n                auth: this.options.auth || {}\n            });\n        }\n    }, {\n        key: 'listen',\n        value: function listen(event, callback) {\n            this.on(this.eventFormatter.format(event), callback);\n            return this;\n        }\n    }, {\n        key: 'on',\n        value: function on(event, callback) {\n            var _this2 = this;\n\n            var listener = function listener(channel, data) {\n                if (_this2.name == channel) {\n                    callback(data);\n                }\n            };\n            this.socket.on(event, listener);\n            this.bind(event, listener);\n        }\n    }, {\n        key: 'configureReconnector',\n        value: function configureReconnector() {\n            var _this3 = this;\n\n            var listener = function listener() {\n                _this3.subscribe();\n            };\n            this.socket.on('reconnect', listener);\n            this.bind('reconnect', listener);\n        }\n    }, {\n        key: 'bind',\n        value: function bind(event, callback) {\n            this.events[event] = this.events[event] || [];\n            this.events[event].push(callback);\n        }\n    }, {\n        key: 'unbind',\n        value: function unbind() {\n            var _this4 = this;\n\n            Object.keys(this.events).forEach(function (event) {\n                _this4.events[event].forEach(function (callback) {\n                    _this4.socket.removeListener(event, callback);\n                });\n                delete _this4.events[event];\n            });\n        }\n    }]);\n    return SocketIoChannel;\n}(Channel);\n\nvar SocketIoPrivateChannel = function (_SocketIoChannel) {\n    inherits(SocketIoPrivateChannel, _SocketIoChannel);\n\n    function SocketIoPrivateChannel() {\n        classCallCheck(this, SocketIoPrivateChannel);\n        return possibleConstructorReturn(this, (SocketIoPrivateChannel.__proto__ || Object.getPrototypeOf(SocketIoPrivateChannel)).apply(this, arguments));\n    }\n\n    createClass(SocketIoPrivateChannel, [{\n        key: 'whisper',\n        value: function whisper(eventName, data) {\n            this.socket.emit('client event', {\n                channel: this.name,\n                event: 'client-' + eventName,\n                data: data\n            });\n            return this;\n        }\n    }]);\n    return SocketIoPrivateChannel;\n}(SocketIoChannel);\n\nvar SocketIoPresenceChannel = function (_SocketIoPrivateChann) {\n    inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);\n\n    function SocketIoPresenceChannel() {\n        classCallCheck(this, SocketIoPresenceChannel);\n        return possibleConstructorReturn(this, (SocketIoPresenceChannel.__proto__ || Object.getPrototypeOf(SocketIoPresenceChannel)).apply(this, arguments));\n    }\n\n    createClass(SocketIoPresenceChannel, [{\n        key: 'here',\n        value: function here(callback) {\n            this.on('presence:subscribed', function (members) {\n                callback(members.map(function (m) {\n                    return m.user_info;\n                }));\n            });\n            return this;\n        }\n    }, {\n        key: 'joining',\n        value: function joining(callback) {\n            this.on('presence:joining', function (member) {\n                return callback(member.user_info);\n            });\n            return this;\n        }\n    }, {\n        key: 'leaving',\n        value: function leaving(callback) {\n            this.on('presence:leaving', function (member) {\n                return callback(member.user_info);\n            });\n            return this;\n        }\n    }]);\n    return SocketIoPresenceChannel;\n}(SocketIoPrivateChannel);\n\nvar PusherConnector = function (_Connector) {\n    inherits(PusherConnector, _Connector);\n\n    function PusherConnector() {\n        var _ref;\n\n        classCallCheck(this, PusherConnector);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = possibleConstructorReturn(this, (_ref = PusherConnector.__proto__ || Object.getPrototypeOf(PusherConnector)).call.apply(_ref, [this].concat(args)));\n\n        _this.channels = {};\n        return _this;\n    }\n\n    createClass(PusherConnector, [{\n        key: 'connect',\n        value: function connect() {\n            this.pusher = new Pusher(this.options.key, this.options);\n        }\n    }, {\n        key: 'listen',\n        value: function listen(name, event, callback) {\n            return this.channel(name).listen(event, callback);\n        }\n    }, {\n        key: 'channel',\n        value: function channel(name) {\n            if (!this.channels[name]) {\n                this.channels[name] = new PusherChannel(this.pusher, name, this.options);\n            }\n            return this.channels[name];\n        }\n    }, {\n        key: 'privateChannel',\n        value: function privateChannel(name) {\n            if (!this.channels['private-' + name]) {\n                this.channels['private-' + name] = new PusherPrivateChannel(this.pusher, 'private-' + name, this.options);\n            }\n            return this.channels['private-' + name];\n        }\n    }, {\n        key: 'presenceChannel',\n        value: function presenceChannel(name) {\n            if (!this.channels['presence-' + name]) {\n                this.channels['presence-' + name] = new PusherPresenceChannel(this.pusher, 'presence-' + name, this.options);\n            }\n            return this.channels['presence-' + name];\n        }\n    }, {\n        key: 'leave',\n        value: function leave(name) {\n            var _this2 = this;\n\n            var channels = [name, 'private-' + name, 'presence-' + name];\n            channels.forEach(function (name, index) {\n                if (_this2.channels[name]) {\n                    _this2.channels[name].unsubscribe();\n                    delete _this2.channels[name];\n                }\n            });\n        }\n    }, {\n        key: 'socketId',\n        value: function socketId() {\n            return this.pusher.connection.socket_id;\n        }\n    }, {\n        key: 'disconnect',\n        value: function disconnect() {\n            this.pusher.disconnect();\n        }\n    }]);\n    return PusherConnector;\n}(Connector);\n\nvar SocketIoConnector = function (_Connector) {\n    inherits(SocketIoConnector, _Connector);\n\n    function SocketIoConnector() {\n        var _ref;\n\n        classCallCheck(this, SocketIoConnector);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = possibleConstructorReturn(this, (_ref = SocketIoConnector.__proto__ || Object.getPrototypeOf(SocketIoConnector)).call.apply(_ref, [this].concat(args)));\n\n        _this.channels = {};\n        return _this;\n    }\n\n    createClass(SocketIoConnector, [{\n        key: 'connect',\n        value: function connect() {\n            var io = this.getSocketIO();\n            this.socket = io(this.options.host, this.options);\n            return this.socket;\n        }\n    }, {\n        key: 'getSocketIO',\n        value: function getSocketIO() {\n            if (typeof io !== 'undefined') {\n                return io;\n            }\n            if (this.options.client !== 'undefined') {\n                return this.options.client;\n            }\n            throw new Error('Socket.io client not found. Should be globally available or passed via options.client');\n        }\n    }, {\n        key: 'listen',\n        value: function listen(name, event, callback) {\n            return this.channel(name).listen(event, callback);\n        }\n    }, {\n        key: 'channel',\n        value: function channel(name) {\n            if (!this.channels[name]) {\n                this.channels[name] = new SocketIoChannel(this.socket, name, this.options);\n            }\n            return this.channels[name];\n        }\n    }, {\n        key: 'privateChannel',\n        value: function privateChannel(name) {\n            if (!this.channels['private-' + name]) {\n                this.channels['private-' + name] = new SocketIoPrivateChannel(this.socket, 'private-' + name, this.options);\n            }\n            return this.channels['private-' + name];\n        }\n    }, {\n        key: 'presenceChannel',\n        value: function presenceChannel(name) {\n            if (!this.channels['presence-' + name]) {\n                this.channels['presence-' + name] = new SocketIoPresenceChannel(this.socket, 'presence-' + name, this.options);\n            }\n            return this.channels['presence-' + name];\n        }\n    }, {\n        key: 'leave',\n        value: function leave(name) {\n            var _this2 = this;\n\n            var channels = [name, 'private-' + name, 'presence-' + name];\n            channels.forEach(function (name) {\n                if (_this2.channels[name]) {\n                    _this2.channels[name].unsubscribe();\n                    delete _this2.channels[name];\n                }\n            });\n        }\n    }, {\n        key: 'socketId',\n        value: function socketId() {\n            return this.socket.id;\n        }\n    }, {\n        key: 'disconnect',\n        value: function disconnect() {\n            this.socket.disconnect();\n        }\n    }]);\n    return SocketIoConnector;\n}(Connector);\n\nvar Echo = function () {\n    function Echo(options) {\n        classCallCheck(this, Echo);\n\n        this.options = options;\n        if (typeof Vue === 'function' && Vue.http) {\n            this.registerVueRequestInterceptor();\n        }\n        if (typeof axios === 'function') {\n            this.registerAxiosRequestInterceptor();\n        }\n        if (typeof jQuery === 'function') {\n            this.registerjQueryAjaxSetup();\n        }\n        if (this.options.broadcaster == 'pusher') {\n            this.connector = new PusherConnector(this.options);\n        } else if (this.options.broadcaster == 'socket.io') {\n            this.connector = new SocketIoConnector(this.options);\n        }\n    }\n\n    createClass(Echo, [{\n        key: 'registerVueRequestInterceptor',\n        value: function registerVueRequestInterceptor() {\n            var _this = this;\n\n            Vue.http.interceptors.push(function (request, next) {\n                if (_this.socketId()) {\n                    request.headers.set('X-Socket-ID', _this.socketId());\n                }\n                next();\n            });\n        }\n    }, {\n        key: 'registerAxiosRequestInterceptor',\n        value: function registerAxiosRequestInterceptor() {\n            var _this2 = this;\n\n            axios.interceptors.request.use(function (config) {\n                if (_this2.socketId()) {\n                    config.headers['X-Socket-Id'] = _this2.socketId();\n                }\n                return config;\n            });\n        }\n    }, {\n        key: 'registerjQueryAjaxSetup',\n        value: function registerjQueryAjaxSetup() {\n            var _this3 = this;\n\n            if (typeof jQuery.ajax != 'undefined') {\n                jQuery.ajaxSetup({\n                    beforeSend: function beforeSend(xhr) {\n                        if (_this3.socketId()) {\n                            xhr.setRequestHeader('X-Socket-Id', _this3.socketId());\n                        }\n                    }\n                });\n            }\n        }\n    }, {\n        key: 'listen',\n        value: function listen(channel, event, callback) {\n            return this.connector.listen(channel, event, callback);\n        }\n    }, {\n        key: 'channel',\n        value: function channel(_channel) {\n            return this.connector.channel(_channel);\n        }\n    }, {\n        key: 'private',\n        value: function _private(channel) {\n            return this.connector.privateChannel(channel);\n        }\n    }, {\n        key: 'join',\n        value: function join(channel) {\n            return this.connector.presenceChannel(channel);\n        }\n    }, {\n        key: 'leave',\n        value: function leave(channel) {\n            this.connector.leave(channel);\n        }\n    }, {\n        key: 'socketId',\n        value: function socketId() {\n            return this.connector.socketId();\n        }\n    }, {\n        key: 'disconnect',\n        value: function disconnect() {\n            this.connector.disconnect();\n        }\n    }]);\n    return Echo;\n}();\n\nmodule.exports = Echo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///184\n");

/***/ }),

/***/ 185:
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * Pusher JavaScript Library v4.2.2\n * https://pusher.com/\n *\n * Copyright 2017, Pusher\n * Released under the MIT licence.\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Pusher\"] = factory();\n\telse\n\t\troot[\"Pusher\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar pusher_1 = __webpack_require__(1);\n\tmodule.exports = pusher_1[\"default\"];\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar runtime_1 = __webpack_require__(2);\n\tvar Collections = __webpack_require__(9);\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar timeline_1 = __webpack_require__(39);\n\tvar level_1 = __webpack_require__(40);\n\tvar StrategyBuilder = __webpack_require__(41);\n\tvar timers_1 = __webpack_require__(12);\n\tvar defaults_1 = __webpack_require__(5);\n\tvar DefaultConfig = __webpack_require__(63);\n\tvar logger_1 = __webpack_require__(8);\n\tvar factory_1 = __webpack_require__(43);\n\tvar url_store_1 = __webpack_require__(14);\n\tvar Pusher = (function () {\n\t    function Pusher(app_key, options) {\n\t        var _this = this;\n\t        checkAppKey(app_key);\n\t        options = options || {};\n\t        if (!options.cluster && !(options.wsHost || options.httpHost)) {\n\t            var suffix = url_store_1[\"default\"].buildLogSuffix(\"javascriptQuickStart\");\n\t            logger_1[\"default\"].warn(\"You should always specify a cluster when connecting. \" + suffix);\n\t        }\n\t        this.key = app_key;\n\t        this.config = Collections.extend(DefaultConfig.getGlobalConfig(), options.cluster ? DefaultConfig.getClusterConfig(options.cluster) : {}, options);\n\t        this.channels = factory_1[\"default\"].createChannels();\n\t        this.global_emitter = new dispatcher_1[\"default\"]();\n\t        this.sessionID = Math.floor(Math.random() * 1000000000);\n\t        this.timeline = new timeline_1[\"default\"](this.key, this.sessionID, {\n\t            cluster: this.config.cluster,\n\t            features: Pusher.getClientFeatures(),\n\t            params: this.config.timelineParams || {},\n\t            limit: 50,\n\t            level: level_1[\"default\"].INFO,\n\t            version: defaults_1[\"default\"].VERSION\n\t        });\n\t        if (!this.config.disableStats) {\n\t            this.timelineSender = factory_1[\"default\"].createTimelineSender(this.timeline, {\n\t                host: this.config.statsHost,\n\t                path: \"/timeline/v2/\" + runtime_1[\"default\"].TimelineTransport.name\n\t            });\n\t        }\n\t        var getStrategy = function (options) {\n\t            var config = Collections.extend({}, _this.config, options);\n\t            return StrategyBuilder.build(runtime_1[\"default\"].getDefaultStrategy(config), config);\n\t        };\n\t        this.connection = factory_1[\"default\"].createConnectionManager(this.key, Collections.extend({ getStrategy: getStrategy,\n\t            timeline: this.timeline,\n\t            activityTimeout: this.config.activity_timeout,\n\t            pongTimeout: this.config.pong_timeout,\n\t            unavailableTimeout: this.config.unavailable_timeout\n\t        }, this.config, { encrypted: this.isEncrypted() }));\n\t        this.connection.bind('connected', function () {\n\t            _this.subscribeAll();\n\t            if (_this.timelineSender) {\n\t                _this.timelineSender.send(_this.connection.isEncrypted());\n\t            }\n\t        });\n\t        this.connection.bind('message', function (params) {\n\t            var internal = (params.event.indexOf('pusher_internal:') === 0);\n\t            if (params.channel) {\n\t                var channel = _this.channel(params.channel);\n\t                if (channel) {\n\t                    channel.handleEvent(params.event, params.data);\n\t                }\n\t            }\n\t            if (!internal) {\n\t                _this.global_emitter.emit(params.event, params.data);\n\t            }\n\t        });\n\t        this.connection.bind('connecting', function () {\n\t            _this.channels.disconnect();\n\t        });\n\t        this.connection.bind('disconnected', function () {\n\t            _this.channels.disconnect();\n\t        });\n\t        this.connection.bind('error', function (err) {\n\t            logger_1[\"default\"].warn('Error', err);\n\t        });\n\t        Pusher.instances.push(this);\n\t        this.timeline.info({ instances: Pusher.instances.length });\n\t        if (Pusher.isReady) {\n\t            this.connect();\n\t        }\n\t    }\n\t    Pusher.ready = function () {\n\t        Pusher.isReady = true;\n\t        for (var i = 0, l = Pusher.instances.length; i < l; i++) {\n\t            Pusher.instances[i].connect();\n\t        }\n\t    };\n\t    Pusher.log = function (message) {\n\t        if (Pusher.logToConsole && (window).console && (window).console.log) {\n\t            (window).console.log(message);\n\t        }\n\t    };\n\t    Pusher.getClientFeatures = function () {\n\t        return Collections.keys(Collections.filterObject({ \"ws\": runtime_1[\"default\"].Transports.ws }, function (t) { return t.isSupported({}); }));\n\t    };\n\t    Pusher.prototype.channel = function (name) {\n\t        return this.channels.find(name);\n\t    };\n\t    Pusher.prototype.allChannels = function () {\n\t        return this.channels.all();\n\t    };\n\t    Pusher.prototype.connect = function () {\n\t        this.connection.connect();\n\t        if (this.timelineSender) {\n\t            if (!this.timelineSenderTimer) {\n\t                var encrypted = this.connection.isEncrypted();\n\t                var timelineSender = this.timelineSender;\n\t                this.timelineSenderTimer = new timers_1.PeriodicTimer(60000, function () {\n\t                    timelineSender.send(encrypted);\n\t                });\n\t            }\n\t        }\n\t    };\n\t    Pusher.prototype.disconnect = function () {\n\t        this.connection.disconnect();\n\t        if (this.timelineSenderTimer) {\n\t            this.timelineSenderTimer.ensureAborted();\n\t            this.timelineSenderTimer = null;\n\t        }\n\t    };\n\t    Pusher.prototype.bind = function (event_name, callback, context) {\n\t        this.global_emitter.bind(event_name, callback, context);\n\t        return this;\n\t    };\n\t    Pusher.prototype.unbind = function (event_name, callback, context) {\n\t        this.global_emitter.unbind(event_name, callback, context);\n\t        return this;\n\t    };\n\t    Pusher.prototype.bind_global = function (callback) {\n\t        this.global_emitter.bind_global(callback);\n\t        return this;\n\t    };\n\t    Pusher.prototype.unbind_global = function (callback) {\n\t        this.global_emitter.unbind_global(callback);\n\t        return this;\n\t    };\n\t    Pusher.prototype.unbind_all = function (callback) {\n\t        this.global_emitter.unbind_all();\n\t        return this;\n\t    };\n\t    Pusher.prototype.subscribeAll = function () {\n\t        var channelName;\n\t        for (channelName in this.channels.channels) {\n\t            if (this.channels.channels.hasOwnProperty(channelName)) {\n\t                this.subscribe(channelName);\n\t            }\n\t        }\n\t    };\n\t    Pusher.prototype.subscribe = function (channel_name) {\n\t        var channel = this.channels.add(channel_name, this);\n\t        if (channel.subscriptionPending && channel.subscriptionCancelled) {\n\t            channel.reinstateSubscription();\n\t        }\n\t        else if (!channel.subscriptionPending && this.connection.state === \"connected\") {\n\t            channel.subscribe();\n\t        }\n\t        return channel;\n\t    };\n\t    Pusher.prototype.unsubscribe = function (channel_name) {\n\t        var channel = this.channels.find(channel_name);\n\t        if (channel && channel.subscriptionPending) {\n\t            channel.cancelSubscription();\n\t        }\n\t        else {\n\t            channel = this.channels.remove(channel_name);\n\t            if (channel && this.connection.state === \"connected\") {\n\t                channel.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    Pusher.prototype.send_event = function (event_name, data, channel) {\n\t        return this.connection.send_event(event_name, data, channel);\n\t    };\n\t    Pusher.prototype.isEncrypted = function () {\n\t        if (runtime_1[\"default\"].getProtocol() === \"https:\") {\n\t            return true;\n\t        }\n\t        else {\n\t            return Boolean(this.config.encrypted);\n\t        }\n\t    };\n\t    Pusher.instances = [];\n\t    Pusher.isReady = false;\n\t    Pusher.logToConsole = false;\n\t    Pusher.Runtime = runtime_1[\"default\"];\n\t    Pusher.ScriptReceivers = runtime_1[\"default\"].ScriptReceivers;\n\t    Pusher.DependenciesReceivers = runtime_1[\"default\"].DependenciesReceivers;\n\t    Pusher.auth_callbacks = runtime_1[\"default\"].auth_callbacks;\n\t    return Pusher;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Pusher;\n\tfunction checkAppKey(key) {\n\t    if (key === null || key === undefined) {\n\t        throw \"You must pass your app key when you instantiate Pusher.\";\n\t    }\n\t}\n\truntime_1[\"default\"].setup(Pusher);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar dependencies_1 = __webpack_require__(3);\n\tvar xhr_auth_1 = __webpack_require__(7);\n\tvar jsonp_auth_1 = __webpack_require__(15);\n\tvar script_request_1 = __webpack_require__(16);\n\tvar jsonp_request_1 = __webpack_require__(17);\n\tvar script_receiver_factory_1 = __webpack_require__(4);\n\tvar jsonp_timeline_1 = __webpack_require__(18);\n\tvar transports_1 = __webpack_require__(19);\n\tvar net_info_1 = __webpack_require__(26);\n\tvar default_strategy_1 = __webpack_require__(27);\n\tvar transport_connection_initializer_1 = __webpack_require__(28);\n\tvar http_1 = __webpack_require__(29);\n\tvar Runtime = {\n\t    nextAuthCallbackID: 1,\n\t    auth_callbacks: {},\n\t    ScriptReceivers: script_receiver_factory_1.ScriptReceivers,\n\t    DependenciesReceivers: dependencies_1.DependenciesReceivers,\n\t    getDefaultStrategy: default_strategy_1[\"default\"],\n\t    Transports: transports_1[\"default\"],\n\t    transportConnectionInitializer: transport_connection_initializer_1[\"default\"],\n\t    HTTPFactory: http_1[\"default\"],\n\t    TimelineTransport: jsonp_timeline_1[\"default\"],\n\t    getXHRAPI: function () {\n\t        return window.XMLHttpRequest;\n\t    },\n\t    getWebSocketAPI: function () {\n\t        return window.WebSocket || window.MozWebSocket;\n\t    },\n\t    setup: function (PusherClass) {\n\t        var _this = this;\n\t        window.Pusher = PusherClass;\n\t        var initializeOnDocumentBody = function () {\n\t            _this.onDocumentBody(PusherClass.ready);\n\t        };\n\t        if (!window.JSON) {\n\t            dependencies_1.Dependencies.load(\"json2\", {}, initializeOnDocumentBody);\n\t        }\n\t        else {\n\t            initializeOnDocumentBody();\n\t        }\n\t    },\n\t    getDocument: function () {\n\t        return document;\n\t    },\n\t    getProtocol: function () {\n\t        return this.getDocument().location.protocol;\n\t    },\n\t    getAuthorizers: function () {\n\t        return { ajax: xhr_auth_1[\"default\"], jsonp: jsonp_auth_1[\"default\"] };\n\t    },\n\t    onDocumentBody: function (callback) {\n\t        var _this = this;\n\t        if (document.body) {\n\t            callback();\n\t        }\n\t        else {\n\t            setTimeout(function () {\n\t                _this.onDocumentBody(callback);\n\t            }, 0);\n\t        }\n\t    },\n\t    createJSONPRequest: function (url, data) {\n\t        return new jsonp_request_1[\"default\"](url, data);\n\t    },\n\t    createScriptRequest: function (src) {\n\t        return new script_request_1[\"default\"](src);\n\t    },\n\t    getLocalStorage: function () {\n\t        try {\n\t            return window.localStorage;\n\t        }\n\t        catch (e) {\n\t            return undefined;\n\t        }\n\t    },\n\t    createXHR: function () {\n\t        if (this.getXHRAPI()) {\n\t            return this.createXMLHttpRequest();\n\t        }\n\t        else {\n\t            return this.createMicrosoftXHR();\n\t        }\n\t    },\n\t    createXMLHttpRequest: function () {\n\t        var Constructor = this.getXHRAPI();\n\t        return new Constructor();\n\t    },\n\t    createMicrosoftXHR: function () {\n\t        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n\t    },\n\t    getNetwork: function () {\n\t        return net_info_1.Network;\n\t    },\n\t    createWebSocket: function (url) {\n\t        var Constructor = this.getWebSocketAPI();\n\t        return new Constructor(url);\n\t    },\n\t    createSocketRequest: function (method, url) {\n\t        if (this.isXHRSupported()) {\n\t            return this.HTTPFactory.createXHR(method, url);\n\t        }\n\t        else if (this.isXDRSupported(url.indexOf(\"https:\") === 0)) {\n\t            return this.HTTPFactory.createXDR(method, url);\n\t        }\n\t        else {\n\t            throw \"Cross-origin HTTP requests are not supported\";\n\t        }\n\t    },\n\t    isXHRSupported: function () {\n\t        var Constructor = this.getXHRAPI();\n\t        return Boolean(Constructor) && (new Constructor()).withCredentials !== undefined;\n\t    },\n\t    isXDRSupported: function (encrypted) {\n\t        var protocol = encrypted ? \"https:\" : \"http:\";\n\t        var documentProtocol = this.getProtocol();\n\t        return Boolean((window['XDomainRequest'])) && documentProtocol === protocol;\n\t    },\n\t    addUnloadListener: function (listener) {\n\t        if (window.addEventListener !== undefined) {\n\t            window.addEventListener(\"unload\", listener, false);\n\t        }\n\t        else if (window.attachEvent !== undefined) {\n\t            window.attachEvent(\"onunload\", listener);\n\t        }\n\t    },\n\t    removeUnloadListener: function (listener) {\n\t        if (window.addEventListener !== undefined) {\n\t            window.removeEventListener(\"unload\", listener, false);\n\t        }\n\t        else if (window.detachEvent !== undefined) {\n\t            window.detachEvent(\"onunload\", listener);\n\t        }\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = Runtime;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar script_receiver_factory_1 = __webpack_require__(4);\n\tvar defaults_1 = __webpack_require__(5);\n\tvar dependency_loader_1 = __webpack_require__(6);\n\texports.DependenciesReceivers = new script_receiver_factory_1.ScriptReceiverFactory(\"_pusher_dependencies\", \"Pusher.DependenciesReceivers\");\n\texports.Dependencies = new dependency_loader_1[\"default\"]({\n\t    cdn_http: defaults_1[\"default\"].cdn_http,\n\t    cdn_https: defaults_1[\"default\"].cdn_https,\n\t    version: defaults_1[\"default\"].VERSION,\n\t    suffix: defaults_1[\"default\"].dependency_suffix,\n\t    receivers: exports.DependenciesReceivers\n\t});\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar ScriptReceiverFactory = (function () {\n\t    function ScriptReceiverFactory(prefix, name) {\n\t        this.lastId = 0;\n\t        this.prefix = prefix;\n\t        this.name = name;\n\t    }\n\t    ScriptReceiverFactory.prototype.create = function (callback) {\n\t        this.lastId++;\n\t        var number = this.lastId;\n\t        var id = this.prefix + number;\n\t        var name = this.name + \"[\" + number + \"]\";\n\t        var called = false;\n\t        var callbackWrapper = function () {\n\t            if (!called) {\n\t                callback.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t        this[number] = callbackWrapper;\n\t        return { number: number, id: id, name: name, callback: callbackWrapper };\n\t    };\n\t    ScriptReceiverFactory.prototype.remove = function (receiver) {\n\t        delete this[receiver.number];\n\t    };\n\t    return ScriptReceiverFactory;\n\t}());\n\texports.ScriptReceiverFactory = ScriptReceiverFactory;\n\texports.ScriptReceivers = new ScriptReceiverFactory(\"_pusher_script_\", \"Pusher.ScriptReceivers\");\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar Defaults = {\n\t    VERSION: \"4.2.2\",\n\t    PROTOCOL: 7,\n\t    host: 'ws.pusherapp.com',\n\t    ws_port: 80,\n\t    wss_port: 443,\n\t    ws_path: '',\n\t    sockjs_host: 'sockjs.pusher.com',\n\t    sockjs_http_port: 80,\n\t    sockjs_https_port: 443,\n\t    sockjs_path: \"/pusher\",\n\t    stats_host: 'stats.pusher.com',\n\t    channel_auth_endpoint: '/pusher/auth',\n\t    channel_auth_transport: 'ajax',\n\t    activity_timeout: 120000,\n\t    pong_timeout: 30000,\n\t    unavailable_timeout: 10000,\n\t    cdn_http: 'http://js.pusher.com',\n\t    cdn_https: 'https://js.pusher.com',\n\t    dependency_suffix: ''\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = Defaults;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar script_receiver_factory_1 = __webpack_require__(4);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar DependencyLoader = (function () {\n\t    function DependencyLoader(options) {\n\t        this.options = options;\n\t        this.receivers = options.receivers || script_receiver_factory_1.ScriptReceivers;\n\t        this.loading = {};\n\t    }\n\t    DependencyLoader.prototype.load = function (name, options, callback) {\n\t        var self = this;\n\t        if (self.loading[name] && self.loading[name].length > 0) {\n\t            self.loading[name].push(callback);\n\t        }\n\t        else {\n\t            self.loading[name] = [callback];\n\t            var request = runtime_1[\"default\"].createScriptRequest(self.getPath(name, options));\n\t            var receiver = self.receivers.create(function (error) {\n\t                self.receivers.remove(receiver);\n\t                if (self.loading[name]) {\n\t                    var callbacks = self.loading[name];\n\t                    delete self.loading[name];\n\t                    var successCallback = function (wasSuccessful) {\n\t                        if (!wasSuccessful) {\n\t                            request.cleanup();\n\t                        }\n\t                    };\n\t                    for (var i = 0; i < callbacks.length; i++) {\n\t                        callbacks[i](error, successCallback);\n\t                    }\n\t                }\n\t            });\n\t            request.send(receiver);\n\t        }\n\t    };\n\t    DependencyLoader.prototype.getRoot = function (options) {\n\t        var cdn;\n\t        var protocol = runtime_1[\"default\"].getDocument().location.protocol;\n\t        if ((options && options.encrypted) || protocol === \"https:\") {\n\t            cdn = this.options.cdn_https;\n\t        }\n\t        else {\n\t            cdn = this.options.cdn_http;\n\t        }\n\t        return cdn.replace(/\\/*$/, \"\") + \"/\" + this.options.version;\n\t    };\n\t    DependencyLoader.prototype.getPath = function (name, options) {\n\t        return this.getRoot(options) + '/' + name + this.options.suffix + '.js';\n\t    };\n\t    ;\n\t    return DependencyLoader;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = DependencyLoader;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar logger_1 = __webpack_require__(8);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar url_store_1 = __webpack_require__(14);\n\tvar ajax = function (context, socketId, callback) {\n\t    var self = this, xhr;\n\t    xhr = runtime_1[\"default\"].createXHR();\n\t    xhr.open(\"POST\", self.options.authEndpoint, true);\n\t    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\t    for (var headerName in this.authOptions.headers) {\n\t        xhr.setRequestHeader(headerName, this.authOptions.headers[headerName]);\n\t    }\n\t    xhr.onreadystatechange = function () {\n\t        if (xhr.readyState === 4) {\n\t            if (xhr.status === 200) {\n\t                var data, parsed = false;\n\t                try {\n\t                    data = JSON.parse(xhr.responseText);\n\t                    parsed = true;\n\t                }\n\t                catch (e) {\n\t                    callback(true, 'JSON returned from webapp was invalid, yet status code was 200. Data was: ' + xhr.responseText);\n\t                }\n\t                if (parsed) {\n\t                    callback(false, data);\n\t                }\n\t            }\n\t            else {\n\t                var suffix = url_store_1[\"default\"].buildLogSuffix(\"authenticationEndpoint\");\n\t                logger_1[\"default\"].warn((\"Couldn't retrieve authentication info. \" + xhr.status) +\n\t                    (\"Clients must be authenticated to join private or presence channels. \" + suffix));\n\t                callback(true, xhr.status);\n\t            }\n\t        }\n\t    };\n\t    xhr.send(this.composeQuery(socketId));\n\t    return xhr;\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = ajax;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar collections_1 = __webpack_require__(9);\n\tvar pusher_1 = __webpack_require__(1);\n\tvar Logger = {\n\t    debug: function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        if (!pusher_1[\"default\"].log) {\n\t            return;\n\t        }\n\t        pusher_1[\"default\"].log(collections_1.stringify.apply(this, arguments));\n\t    },\n\t    warn: function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i - 0] = arguments[_i];\n\t        }\n\t        var message = collections_1.stringify.apply(this, arguments);\n\t        if (pusher_1[\"default\"].log) {\n\t            pusher_1[\"default\"].log(message);\n\t        }\n\t        else if ((window).console) {\n\t            if ((window).console.warn) {\n\t                (window).console.warn(message);\n\t            }\n\t            else if ((window).console.log) {\n\t                (window).console.log(message);\n\t            }\n\t        }\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = Logger;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar base64_1 = __webpack_require__(10);\n\tvar util_1 = __webpack_require__(11);\n\tfunction extend(target) {\n\t    var sources = [];\n\t    for (var _i = 1; _i < arguments.length; _i++) {\n\t        sources[_i - 1] = arguments[_i];\n\t    }\n\t    for (var i = 0; i < sources.length; i++) {\n\t        var extensions = sources[i];\n\t        for (var property in extensions) {\n\t            if (extensions[property] && extensions[property].constructor &&\n\t                extensions[property].constructor === Object) {\n\t                target[property] = extend(target[property] || {}, extensions[property]);\n\t            }\n\t            else {\n\t                target[property] = extensions[property];\n\t            }\n\t        }\n\t    }\n\t    return target;\n\t}\n\texports.extend = extend;\n\tfunction stringify() {\n\t    var m = [\"Pusher\"];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t        if (typeof arguments[i] === \"string\") {\n\t            m.push(arguments[i]);\n\t        }\n\t        else {\n\t            m.push(safeJSONStringify(arguments[i]));\n\t        }\n\t    }\n\t    return m.join(\" : \");\n\t}\n\texports.stringify = stringify;\n\tfunction arrayIndexOf(array, item) {\n\t    var nativeIndexOf = Array.prototype.indexOf;\n\t    if (array === null) {\n\t        return -1;\n\t    }\n\t    if (nativeIndexOf && array.indexOf === nativeIndexOf) {\n\t        return array.indexOf(item);\n\t    }\n\t    for (var i = 0, l = array.length; i < l; i++) {\n\t        if (array[i] === item) {\n\t            return i;\n\t        }\n\t    }\n\t    return -1;\n\t}\n\texports.arrayIndexOf = arrayIndexOf;\n\tfunction objectApply(object, f) {\n\t    for (var key in object) {\n\t        if (Object.prototype.hasOwnProperty.call(object, key)) {\n\t            f(object[key], key, object);\n\t        }\n\t    }\n\t}\n\texports.objectApply = objectApply;\n\tfunction keys(object) {\n\t    var keys = [];\n\t    objectApply(object, function (_, key) {\n\t        keys.push(key);\n\t    });\n\t    return keys;\n\t}\n\texports.keys = keys;\n\tfunction values(object) {\n\t    var values = [];\n\t    objectApply(object, function (value) {\n\t        values.push(value);\n\t    });\n\t    return values;\n\t}\n\texports.values = values;\n\tfunction apply(array, f, context) {\n\t    for (var i = 0; i < array.length; i++) {\n\t        f.call(context || (window), array[i], i, array);\n\t    }\n\t}\n\texports.apply = apply;\n\tfunction map(array, f) {\n\t    var result = [];\n\t    for (var i = 0; i < array.length; i++) {\n\t        result.push(f(array[i], i, array, result));\n\t    }\n\t    return result;\n\t}\n\texports.map = map;\n\tfunction mapObject(object, f) {\n\t    var result = {};\n\t    objectApply(object, function (value, key) {\n\t        result[key] = f(value);\n\t    });\n\t    return result;\n\t}\n\texports.mapObject = mapObject;\n\tfunction filter(array, test) {\n\t    test = test || function (value) { return !!value; };\n\t    var result = [];\n\t    for (var i = 0; i < array.length; i++) {\n\t        if (test(array[i], i, array, result)) {\n\t            result.push(array[i]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\texports.filter = filter;\n\tfunction filterObject(object, test) {\n\t    var result = {};\n\t    objectApply(object, function (value, key) {\n\t        if ((test && test(value, key, object, result)) || Boolean(value)) {\n\t            result[key] = value;\n\t        }\n\t    });\n\t    return result;\n\t}\n\texports.filterObject = filterObject;\n\tfunction flatten(object) {\n\t    var result = [];\n\t    objectApply(object, function (value, key) {\n\t        result.push([key, value]);\n\t    });\n\t    return result;\n\t}\n\texports.flatten = flatten;\n\tfunction any(array, test) {\n\t    for (var i = 0; i < array.length; i++) {\n\t        if (test(array[i], i, array)) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}\n\texports.any = any;\n\tfunction all(array, test) {\n\t    for (var i = 0; i < array.length; i++) {\n\t        if (!test(array[i], i, array)) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\texports.all = all;\n\tfunction encodeParamsObject(data) {\n\t    return mapObject(data, function (value) {\n\t        if (typeof value === \"object\") {\n\t            value = safeJSONStringify(value);\n\t        }\n\t        return encodeURIComponent(base64_1[\"default\"](value.toString()));\n\t    });\n\t}\n\texports.encodeParamsObject = encodeParamsObject;\n\tfunction buildQueryString(data) {\n\t    var params = filterObject(data, function (value) {\n\t        return value !== undefined;\n\t    });\n\t    var query = map(flatten(encodeParamsObject(params)), util_1[\"default\"].method(\"join\", \"=\")).join(\"&\");\n\t    return query;\n\t}\n\texports.buildQueryString = buildQueryString;\n\tfunction decycleObject(object) {\n\t    var objects = [], paths = [];\n\t    return (function derez(value, path) {\n\t        var i, name, nu;\n\t        switch (typeof value) {\n\t            case 'object':\n\t                if (!value) {\n\t                    return null;\n\t                }\n\t                for (i = 0; i < objects.length; i += 1) {\n\t                    if (objects[i] === value) {\n\t                        return { $ref: paths[i] };\n\t                    }\n\t                }\n\t                objects.push(value);\n\t                paths.push(path);\n\t                if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t                    nu = [];\n\t                    for (i = 0; i < value.length; i += 1) {\n\t                        nu[i] = derez(value[i], path + '[' + i + ']');\n\t                    }\n\t                }\n\t                else {\n\t                    nu = {};\n\t                    for (name in value) {\n\t                        if (Object.prototype.hasOwnProperty.call(value, name)) {\n\t                            nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n\t                        }\n\t                    }\n\t                }\n\t                return nu;\n\t            case 'number':\n\t            case 'string':\n\t            case 'boolean':\n\t                return value;\n\t        }\n\t    }(object, '$'));\n\t}\n\texports.decycleObject = decycleObject;\n\tfunction safeJSONStringify(source) {\n\t    try {\n\t        return JSON.stringify(source);\n\t    }\n\t    catch (e) {\n\t        return JSON.stringify(decycleObject(source));\n\t    }\n\t}\n\texports.safeJSONStringify = safeJSONStringify;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tfunction encode(s) {\n\t    return btoa(utob(s));\n\t}\n\texports.__esModule = true;\n\texports[\"default\"] = encode;\n\tvar fromCharCode = String.fromCharCode;\n\tvar b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tvar b64tab = {};\n\tfor (var i = 0, l = b64chars.length; i < l; i++) {\n\t    b64tab[b64chars.charAt(i)] = i;\n\t}\n\tvar cb_utob = function (c) {\n\t    var cc = c.charCodeAt(0);\n\t    return cc < 0x80 ? c\n\t        : cc < 0x800 ? fromCharCode(0xc0 | (cc >>> 6)) +\n\t            fromCharCode(0x80 | (cc & 0x3f))\n\t            : fromCharCode(0xe0 | ((cc >>> 12) & 0x0f)) +\n\t                fromCharCode(0x80 | ((cc >>> 6) & 0x3f)) +\n\t                fromCharCode(0x80 | (cc & 0x3f));\n\t};\n\tvar utob = function (u) {\n\t    return u.replace(/[^\\x00-\\x7F]/g, cb_utob);\n\t};\n\tvar cb_encode = function (ccc) {\n\t    var padlen = [0, 2, 1][ccc.length % 3];\n\t    var ord = ccc.charCodeAt(0) << 16\n\t        | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n\t        | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0));\n\t    var chars = [\n\t        b64chars.charAt(ord >>> 18),\n\t        b64chars.charAt((ord >>> 12) & 63),\n\t        padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n\t        padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n\t    ];\n\t    return chars.join('');\n\t};\n\tvar btoa = (window).btoa || function (b) {\n\t    return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n\t};\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar timers_1 = __webpack_require__(12);\n\tvar Util = {\n\t    now: function () {\n\t        if (Date.now) {\n\t            return Date.now();\n\t        }\n\t        else {\n\t            return new Date().valueOf();\n\t        }\n\t    },\n\t    defer: function (callback) {\n\t        return new timers_1.OneOffTimer(0, callback);\n\t    },\n\t    method: function (name) {\n\t        var args = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            args[_i - 1] = arguments[_i];\n\t        }\n\t        var boundArguments = Array.prototype.slice.call(arguments, 1);\n\t        return function (object) {\n\t            return object[name].apply(object, boundArguments.concat(arguments));\n\t        };\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = Util;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar abstract_timer_1 = __webpack_require__(13);\n\tfunction clearTimeout(timer) {\n\t    (window).clearTimeout(timer);\n\t}\n\tfunction clearInterval(timer) {\n\t    (window).clearInterval(timer);\n\t}\n\tvar OneOffTimer = (function (_super) {\n\t    __extends(OneOffTimer, _super);\n\t    function OneOffTimer(delay, callback) {\n\t        _super.call(this, setTimeout, clearTimeout, delay, function (timer) {\n\t            callback();\n\t            return null;\n\t        });\n\t    }\n\t    return OneOffTimer;\n\t}(abstract_timer_1[\"default\"]));\n\texports.OneOffTimer = OneOffTimer;\n\tvar PeriodicTimer = (function (_super) {\n\t    __extends(PeriodicTimer, _super);\n\t    function PeriodicTimer(delay, callback) {\n\t        _super.call(this, setInterval, clearInterval, delay, function (timer) {\n\t            callback();\n\t            return timer;\n\t        });\n\t    }\n\t    return PeriodicTimer;\n\t}(abstract_timer_1[\"default\"]));\n\texports.PeriodicTimer = PeriodicTimer;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar Timer = (function () {\n\t    function Timer(set, clear, delay, callback) {\n\t        var _this = this;\n\t        this.clear = clear;\n\t        this.timer = set(function () {\n\t            if (_this.timer) {\n\t                _this.timer = callback(_this.timer);\n\t            }\n\t        }, delay);\n\t    }\n\t    Timer.prototype.isRunning = function () {\n\t        return this.timer !== null;\n\t    };\n\t    Timer.prototype.ensureAborted = function () {\n\t        if (this.timer) {\n\t            this.clear(this.timer);\n\t            this.timer = null;\n\t        }\n\t    };\n\t    return Timer;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Timer;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar urlStore = {\n\t    baseUrl: \"https://pusher.com\",\n\t    urls: {\n\t        authenticationEndpoint: {\n\t            path: \"/docs/authenticating_users\"\n\t        },\n\t        javascriptQuickStart: {\n\t            path: \"/docs/javascript_quick_start\"\n\t        }\n\t    }\n\t};\n\tvar buildLogSuffix = function (key) {\n\t    var urlPrefix = \"See:\";\n\t    var urlObj = urlStore.urls[key];\n\t    if (!urlObj)\n\t        return \"\";\n\t    var url;\n\t    if (urlObj.fullUrl) {\n\t        url = urlObj.fullUrl;\n\t    }\n\t    else if (urlObj.path) {\n\t        url = urlStore.baseUrl + urlObj.path;\n\t    }\n\t    if (!url)\n\t        return \"\";\n\t    return urlPrefix + \" \" + url;\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = { buildLogSuffix: buildLogSuffix };\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar logger_1 = __webpack_require__(8);\n\tvar jsonp = function (context, socketId, callback) {\n\t    if (this.authOptions.headers !== undefined) {\n\t        logger_1[\"default\"].warn(\"Warn\", \"To send headers with the auth request, you must use AJAX, rather than JSONP.\");\n\t    }\n\t    var callbackName = context.nextAuthCallbackID.toString();\n\t    context.nextAuthCallbackID++;\n\t    var document = context.getDocument();\n\t    var script = document.createElement(\"script\");\n\t    context.auth_callbacks[callbackName] = function (data) {\n\t        callback(false, data);\n\t    };\n\t    var callback_name = \"Pusher.auth_callbacks['\" + callbackName + \"']\";\n\t    script.src = this.options.authEndpoint +\n\t        '?callback=' +\n\t        encodeURIComponent(callback_name) +\n\t        '&' +\n\t        this.composeQuery(socketId);\n\t    var head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\t    head.insertBefore(script, head.firstChild);\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = jsonp;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar ScriptRequest = (function () {\n\t    function ScriptRequest(src) {\n\t        this.src = src;\n\t    }\n\t    ScriptRequest.prototype.send = function (receiver) {\n\t        var self = this;\n\t        var errorString = \"Error loading \" + self.src;\n\t        self.script = document.createElement(\"script\");\n\t        self.script.id = receiver.id;\n\t        self.script.src = self.src;\n\t        self.script.type = \"text/javascript\";\n\t        self.script.charset = \"UTF-8\";\n\t        if (self.script.addEventListener) {\n\t            self.script.onerror = function () {\n\t                receiver.callback(errorString);\n\t            };\n\t            self.script.onload = function () {\n\t                receiver.callback(null);\n\t            };\n\t        }\n\t        else {\n\t            self.script.onreadystatechange = function () {\n\t                if (self.script.readyState === 'loaded' ||\n\t                    self.script.readyState === 'complete') {\n\t                    receiver.callback(null);\n\t                }\n\t            };\n\t        }\n\t        if (self.script.async === undefined && document.attachEvent &&\n\t            /opera/i.test(navigator.userAgent)) {\n\t            self.errorScript = document.createElement(\"script\");\n\t            self.errorScript.id = receiver.id + \"_error\";\n\t            self.errorScript.text = receiver.name + \"('\" + errorString + \"');\";\n\t            self.script.async = self.errorScript.async = false;\n\t        }\n\t        else {\n\t            self.script.async = true;\n\t        }\n\t        var head = document.getElementsByTagName('head')[0];\n\t        head.insertBefore(self.script, head.firstChild);\n\t        if (self.errorScript) {\n\t            head.insertBefore(self.errorScript, self.script.nextSibling);\n\t        }\n\t    };\n\t    ScriptRequest.prototype.cleanup = function () {\n\t        if (this.script) {\n\t            this.script.onload = this.script.onerror = null;\n\t            this.script.onreadystatechange = null;\n\t        }\n\t        if (this.script && this.script.parentNode) {\n\t            this.script.parentNode.removeChild(this.script);\n\t        }\n\t        if (this.errorScript && this.errorScript.parentNode) {\n\t            this.errorScript.parentNode.removeChild(this.errorScript);\n\t        }\n\t        this.script = null;\n\t        this.errorScript = null;\n\t    };\n\t    return ScriptRequest;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = ScriptRequest;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar JSONPRequest = (function () {\n\t    function JSONPRequest(url, data) {\n\t        this.url = url;\n\t        this.data = data;\n\t    }\n\t    JSONPRequest.prototype.send = function (receiver) {\n\t        if (this.request) {\n\t            return;\n\t        }\n\t        var query = Collections.buildQueryString(this.data);\n\t        var url = this.url + \"/\" + receiver.number + \"?\" + query;\n\t        this.request = runtime_1[\"default\"].createScriptRequest(url);\n\t        this.request.send(receiver);\n\t    };\n\t    JSONPRequest.prototype.cleanup = function () {\n\t        if (this.request) {\n\t            this.request.cleanup();\n\t        }\n\t    };\n\t    return JSONPRequest;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = JSONPRequest;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar runtime_1 = __webpack_require__(2);\n\tvar script_receiver_factory_1 = __webpack_require__(4);\n\tvar getAgent = function (sender, encrypted) {\n\t    return function (data, callback) {\n\t        var scheme = \"http\" + (encrypted ? \"s\" : \"\") + \"://\";\n\t        var url = scheme + (sender.host || sender.options.host) + sender.options.path;\n\t        var request = runtime_1[\"default\"].createJSONPRequest(url, data);\n\t        var receiver = runtime_1[\"default\"].ScriptReceivers.create(function (error, result) {\n\t            script_receiver_factory_1.ScriptReceivers.remove(receiver);\n\t            request.cleanup();\n\t            if (result && result.host) {\n\t                sender.host = result.host;\n\t            }\n\t            if (callback) {\n\t                callback(error, result);\n\t            }\n\t        });\n\t        request.send(receiver);\n\t    };\n\t};\n\tvar jsonp = {\n\t    name: 'jsonp',\n\t    getAgent: getAgent\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = jsonp;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar transports_1 = __webpack_require__(20);\n\tvar transport_1 = __webpack_require__(22);\n\tvar URLSchemes = __webpack_require__(21);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar dependencies_1 = __webpack_require__(3);\n\tvar Collections = __webpack_require__(9);\n\tvar SockJSTransport = new transport_1[\"default\"]({\n\t    file: \"sockjs\",\n\t    urls: URLSchemes.sockjs,\n\t    handlesActivityChecks: true,\n\t    supportsPing: false,\n\t    isSupported: function () {\n\t        return true;\n\t    },\n\t    isInitialized: function () {\n\t        return window.SockJS !== undefined;\n\t    },\n\t    getSocket: function (url, options) {\n\t        return new window.SockJS(url, null, {\n\t            js_path: dependencies_1.Dependencies.getPath(\"sockjs\", {\n\t                encrypted: options.encrypted\n\t            }),\n\t            ignore_null_origin: options.ignoreNullOrigin\n\t        });\n\t    },\n\t    beforeOpen: function (socket, path) {\n\t        socket.send(JSON.stringify({\n\t            path: path\n\t        }));\n\t    }\n\t});\n\tvar xdrConfiguration = {\n\t    isSupported: function (environment) {\n\t        var yes = runtime_1[\"default\"].isXDRSupported(environment.encrypted);\n\t        return yes;\n\t    }\n\t};\n\tvar XDRStreamingTransport = new transport_1[\"default\"](Collections.extend({}, transports_1.streamingConfiguration, xdrConfiguration));\n\tvar XDRPollingTransport = new transport_1[\"default\"](Collections.extend({}, transports_1.pollingConfiguration, xdrConfiguration));\n\ttransports_1[\"default\"].xdr_streaming = XDRStreamingTransport;\n\ttransports_1[\"default\"].xdr_polling = XDRPollingTransport;\n\ttransports_1[\"default\"].sockjs = SockJSTransport;\n\texports.__esModule = true;\n\texports[\"default\"] = transports_1[\"default\"];\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar URLSchemes = __webpack_require__(21);\n\tvar transport_1 = __webpack_require__(22);\n\tvar Collections = __webpack_require__(9);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar WSTransport = new transport_1[\"default\"]({\n\t    urls: URLSchemes.ws,\n\t    handlesActivityChecks: false,\n\t    supportsPing: false,\n\t    isInitialized: function () {\n\t        return Boolean(runtime_1[\"default\"].getWebSocketAPI());\n\t    },\n\t    isSupported: function () {\n\t        return Boolean(runtime_1[\"default\"].getWebSocketAPI());\n\t    },\n\t    getSocket: function (url) {\n\t        return runtime_1[\"default\"].createWebSocket(url);\n\t    }\n\t});\n\tvar httpConfiguration = {\n\t    urls: URLSchemes.http,\n\t    handlesActivityChecks: false,\n\t    supportsPing: true,\n\t    isInitialized: function () {\n\t        return true;\n\t    }\n\t};\n\texports.streamingConfiguration = Collections.extend({ getSocket: function (url) {\n\t        return runtime_1[\"default\"].HTTPFactory.createStreamingSocket(url);\n\t    }\n\t}, httpConfiguration);\n\texports.pollingConfiguration = Collections.extend({ getSocket: function (url) {\n\t        return runtime_1[\"default\"].HTTPFactory.createPollingSocket(url);\n\t    }\n\t}, httpConfiguration);\n\tvar xhrConfiguration = {\n\t    isSupported: function () {\n\t        return runtime_1[\"default\"].isXHRSupported();\n\t    }\n\t};\n\tvar XHRStreamingTransport = new transport_1[\"default\"](Collections.extend({}, exports.streamingConfiguration, xhrConfiguration));\n\tvar XHRPollingTransport = new transport_1[\"default\"](Collections.extend({}, exports.pollingConfiguration, xhrConfiguration));\n\tvar Transports = {\n\t    ws: WSTransport,\n\t    xhr_streaming: XHRStreamingTransport,\n\t    xhr_polling: XHRPollingTransport\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = Transports;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar defaults_1 = __webpack_require__(5);\n\tfunction getGenericURL(baseScheme, params, path) {\n\t    var scheme = baseScheme + (params.encrypted ? \"s\" : \"\");\n\t    var host = params.encrypted ? params.hostEncrypted : params.hostUnencrypted;\n\t    return scheme + \"://\" + host + path;\n\t}\n\tfunction getGenericPath(key, queryString) {\n\t    var path = \"/app/\" + key;\n\t    var query = \"?protocol=\" + defaults_1[\"default\"].PROTOCOL +\n\t        \"&client=js\" +\n\t        \"&version=\" + defaults_1[\"default\"].VERSION +\n\t        (queryString ? (\"&\" + queryString) : \"\");\n\t    return path + query;\n\t}\n\texports.ws = {\n\t    getInitial: function (key, params) {\n\t        var path = (params.httpPath || \"\") + getGenericPath(key, \"flash=false\");\n\t        return getGenericURL(\"ws\", params, path);\n\t    }\n\t};\n\texports.http = {\n\t    getInitial: function (key, params) {\n\t        var path = (params.httpPath || \"/pusher\") + getGenericPath(key);\n\t        return getGenericURL(\"http\", params, path);\n\t    }\n\t};\n\texports.sockjs = {\n\t    getInitial: function (key, params) {\n\t        return getGenericURL(\"http\", params, params.httpPath || \"/pusher\");\n\t    },\n\t    getPath: function (key, params) {\n\t        return getGenericPath(key);\n\t    }\n\t};\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar transport_connection_1 = __webpack_require__(23);\n\tvar Transport = (function () {\n\t    function Transport(hooks) {\n\t        this.hooks = hooks;\n\t    }\n\t    Transport.prototype.isSupported = function (environment) {\n\t        return this.hooks.isSupported(environment);\n\t    };\n\t    Transport.prototype.createConnection = function (name, priority, key, options) {\n\t        return new transport_connection_1[\"default\"](this.hooks, name, priority, key, options);\n\t    };\n\t    return Transport;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Transport;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar util_1 = __webpack_require__(11);\n\tvar Collections = __webpack_require__(9);\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar logger_1 = __webpack_require__(8);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar TransportConnection = (function (_super) {\n\t    __extends(TransportConnection, _super);\n\t    function TransportConnection(hooks, name, priority, key, options) {\n\t        _super.call(this);\n\t        this.initialize = runtime_1[\"default\"].transportConnectionInitializer;\n\t        this.hooks = hooks;\n\t        this.name = name;\n\t        this.priority = priority;\n\t        this.key = key;\n\t        this.options = options;\n\t        this.state = \"new\";\n\t        this.timeline = options.timeline;\n\t        this.activityTimeout = options.activityTimeout;\n\t        this.id = this.timeline.generateUniqueID();\n\t    }\n\t    TransportConnection.prototype.handlesActivityChecks = function () {\n\t        return Boolean(this.hooks.handlesActivityChecks);\n\t    };\n\t    TransportConnection.prototype.supportsPing = function () {\n\t        return Boolean(this.hooks.supportsPing);\n\t    };\n\t    TransportConnection.prototype.connect = function () {\n\t        var _this = this;\n\t        if (this.socket || this.state !== \"initialized\") {\n\t            return false;\n\t        }\n\t        var url = this.hooks.urls.getInitial(this.key, this.options);\n\t        try {\n\t            this.socket = this.hooks.getSocket(url, this.options);\n\t        }\n\t        catch (e) {\n\t            util_1[\"default\"].defer(function () {\n\t                _this.onError(e);\n\t                _this.changeState(\"closed\");\n\t            });\n\t            return false;\n\t        }\n\t        this.bindListeners();\n\t        logger_1[\"default\"].debug(\"Connecting\", { transport: this.name, url: url });\n\t        this.changeState(\"connecting\");\n\t        return true;\n\t    };\n\t    TransportConnection.prototype.close = function () {\n\t        if (this.socket) {\n\t            this.socket.close();\n\t            return true;\n\t        }\n\t        else {\n\t            return false;\n\t        }\n\t    };\n\t    TransportConnection.prototype.send = function (data) {\n\t        var _this = this;\n\t        if (this.state === \"open\") {\n\t            util_1[\"default\"].defer(function () {\n\t                if (_this.socket) {\n\t                    _this.socket.send(data);\n\t                }\n\t            });\n\t            return true;\n\t        }\n\t        else {\n\t            return false;\n\t        }\n\t    };\n\t    TransportConnection.prototype.ping = function () {\n\t        if (this.state === \"open\" && this.supportsPing()) {\n\t            this.socket.ping();\n\t        }\n\t    };\n\t    TransportConnection.prototype.onOpen = function () {\n\t        if (this.hooks.beforeOpen) {\n\t            this.hooks.beforeOpen(this.socket, this.hooks.urls.getPath(this.key, this.options));\n\t        }\n\t        this.changeState(\"open\");\n\t        this.socket.onopen = undefined;\n\t    };\n\t    TransportConnection.prototype.onError = function (error) {\n\t        this.emit(\"error\", { type: 'WebSocketError', error: error });\n\t        this.timeline.error(this.buildTimelineMessage({ error: error.toString() }));\n\t    };\n\t    TransportConnection.prototype.onClose = function (closeEvent) {\n\t        if (closeEvent) {\n\t            this.changeState(\"closed\", {\n\t                code: closeEvent.code,\n\t                reason: closeEvent.reason,\n\t                wasClean: closeEvent.wasClean\n\t            });\n\t        }\n\t        else {\n\t            this.changeState(\"closed\");\n\t        }\n\t        this.unbindListeners();\n\t        this.socket = undefined;\n\t    };\n\t    TransportConnection.prototype.onMessage = function (message) {\n\t        this.emit(\"message\", message);\n\t    };\n\t    TransportConnection.prototype.onActivity = function () {\n\t        this.emit(\"activity\");\n\t    };\n\t    TransportConnection.prototype.bindListeners = function () {\n\t        var _this = this;\n\t        this.socket.onopen = function () {\n\t            _this.onOpen();\n\t        };\n\t        this.socket.onerror = function (error) {\n\t            _this.onError(error);\n\t        };\n\t        this.socket.onclose = function (closeEvent) {\n\t            _this.onClose(closeEvent);\n\t        };\n\t        this.socket.onmessage = function (message) {\n\t            _this.onMessage(message);\n\t        };\n\t        if (this.supportsPing()) {\n\t            this.socket.onactivity = function () { _this.onActivity(); };\n\t        }\n\t    };\n\t    TransportConnection.prototype.unbindListeners = function () {\n\t        if (this.socket) {\n\t            this.socket.onopen = undefined;\n\t            this.socket.onerror = undefined;\n\t            this.socket.onclose = undefined;\n\t            this.socket.onmessage = undefined;\n\t            if (this.supportsPing()) {\n\t                this.socket.onactivity = undefined;\n\t            }\n\t        }\n\t    };\n\t    TransportConnection.prototype.changeState = function (state, params) {\n\t        this.state = state;\n\t        this.timeline.info(this.buildTimelineMessage({\n\t            state: state,\n\t            params: params\n\t        }));\n\t        this.emit(state, params);\n\t    };\n\t    TransportConnection.prototype.buildTimelineMessage = function (message) {\n\t        return Collections.extend({ cid: this.id }, message);\n\t    };\n\t    return TransportConnection;\n\t}(dispatcher_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = TransportConnection;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar callback_registry_1 = __webpack_require__(25);\n\tvar Dispatcher = (function () {\n\t    function Dispatcher(failThrough) {\n\t        this.callbacks = new callback_registry_1[\"default\"]();\n\t        this.global_callbacks = [];\n\t        this.failThrough = failThrough;\n\t    }\n\t    Dispatcher.prototype.bind = function (eventName, callback, context) {\n\t        this.callbacks.add(eventName, callback, context);\n\t        return this;\n\t    };\n\t    Dispatcher.prototype.bind_global = function (callback) {\n\t        this.global_callbacks.push(callback);\n\t        return this;\n\t    };\n\t    Dispatcher.prototype.unbind = function (eventName, callback, context) {\n\t        this.callbacks.remove(eventName, callback, context);\n\t        return this;\n\t    };\n\t    Dispatcher.prototype.unbind_global = function (callback) {\n\t        if (!callback) {\n\t            this.global_callbacks = [];\n\t            return this;\n\t        }\n\t        this.global_callbacks = Collections.filter(this.global_callbacks || [], function (c) { return c !== callback; });\n\t        return this;\n\t    };\n\t    Dispatcher.prototype.unbind_all = function () {\n\t        this.unbind();\n\t        this.unbind_global();\n\t        return this;\n\t    };\n\t    Dispatcher.prototype.emit = function (eventName, data) {\n\t        var i;\n\t        for (i = 0; i < this.global_callbacks.length; i++) {\n\t            this.global_callbacks[i](eventName, data);\n\t        }\n\t        var callbacks = this.callbacks.get(eventName);\n\t        if (callbacks && callbacks.length > 0) {\n\t            for (i = 0; i < callbacks.length; i++) {\n\t                callbacks[i].fn.call(callbacks[i].context || (window), data);\n\t            }\n\t        }\n\t        else if (this.failThrough) {\n\t            this.failThrough(eventName, data);\n\t        }\n\t        return this;\n\t    };\n\t    return Dispatcher;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Dispatcher;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar CallbackRegistry = (function () {\n\t    function CallbackRegistry() {\n\t        this._callbacks = {};\n\t    }\n\t    CallbackRegistry.prototype.get = function (name) {\n\t        return this._callbacks[prefix(name)];\n\t    };\n\t    CallbackRegistry.prototype.add = function (name, callback, context) {\n\t        var prefixedEventName = prefix(name);\n\t        this._callbacks[prefixedEventName] = this._callbacks[prefixedEventName] || [];\n\t        this._callbacks[prefixedEventName].push({\n\t            fn: callback,\n\t            context: context\n\t        });\n\t    };\n\t    CallbackRegistry.prototype.remove = function (name, callback, context) {\n\t        if (!name && !callback && !context) {\n\t            this._callbacks = {};\n\t            return;\n\t        }\n\t        var names = name ? [prefix(name)] : Collections.keys(this._callbacks);\n\t        if (callback || context) {\n\t            this.removeCallback(names, callback, context);\n\t        }\n\t        else {\n\t            this.removeAllCallbacks(names);\n\t        }\n\t    };\n\t    CallbackRegistry.prototype.removeCallback = function (names, callback, context) {\n\t        Collections.apply(names, function (name) {\n\t            this._callbacks[name] = Collections.filter(this._callbacks[name] || [], function (binding) {\n\t                return (callback && callback !== binding.fn) ||\n\t                    (context && context !== binding.context);\n\t            });\n\t            if (this._callbacks[name].length === 0) {\n\t                delete this._callbacks[name];\n\t            }\n\t        }, this);\n\t    };\n\t    CallbackRegistry.prototype.removeAllCallbacks = function (names) {\n\t        Collections.apply(names, function (name) {\n\t            delete this._callbacks[name];\n\t        }, this);\n\t    };\n\t    return CallbackRegistry;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = CallbackRegistry;\n\tfunction prefix(name) {\n\t    return \"_\" + name;\n\t}\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar NetInfo = (function (_super) {\n\t    __extends(NetInfo, _super);\n\t    function NetInfo() {\n\t        _super.call(this);\n\t        var self = this;\n\t        if (window.addEventListener !== undefined) {\n\t            window.addEventListener(\"online\", function () {\n\t                self.emit('online');\n\t            }, false);\n\t            window.addEventListener(\"offline\", function () {\n\t                self.emit('offline');\n\t            }, false);\n\t        }\n\t    }\n\t    NetInfo.prototype.isOnline = function () {\n\t        if (window.navigator.onLine === undefined) {\n\t            return true;\n\t        }\n\t        else {\n\t            return window.navigator.onLine;\n\t        }\n\t    };\n\t    return NetInfo;\n\t}(dispatcher_1[\"default\"]));\n\texports.NetInfo = NetInfo;\n\texports.Network = new NetInfo();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar getDefaultStrategy = function (config) {\n\t    var wsStrategy;\n\t    if (config.encrypted) {\n\t        wsStrategy = [\n\t            \":best_connected_ever\",\n\t            \":ws_loop\",\n\t            [\":delayed\", 2000, [\":http_fallback_loop\"]]\n\t        ];\n\t    }\n\t    else {\n\t        wsStrategy = [\n\t            \":best_connected_ever\",\n\t            \":ws_loop\",\n\t            [\":delayed\", 2000, [\":wss_loop\"]],\n\t            [\":delayed\", 5000, [\":http_fallback_loop\"]]\n\t        ];\n\t    }\n\t    return [\n\t        [\":def\", \"ws_options\", {\n\t                hostUnencrypted: config.wsHost + \":\" + config.wsPort,\n\t                hostEncrypted: config.wsHost + \":\" + config.wssPort,\n\t                httpPath: config.wsPath\n\t            }],\n\t        [\":def\", \"wss_options\", [\":extend\", \":ws_options\", {\n\t                    encrypted: true\n\t                }]],\n\t        [\":def\", \"sockjs_options\", {\n\t                hostUnencrypted: config.httpHost + \":\" + config.httpPort,\n\t                hostEncrypted: config.httpHost + \":\" + config.httpsPort,\n\t                httpPath: config.httpPath\n\t            }],\n\t        [\":def\", \"timeouts\", {\n\t                loop: true,\n\t                timeout: 15000,\n\t                timeoutLimit: 60000\n\t            }],\n\t        [\":def\", \"ws_manager\", [\":transport_manager\", {\n\t                    lives: 2,\n\t                    minPingDelay: 10000,\n\t                    maxPingDelay: config.activity_timeout\n\t                }]],\n\t        [\":def\", \"streaming_manager\", [\":transport_manager\", {\n\t                    lives: 2,\n\t                    minPingDelay: 10000,\n\t                    maxPingDelay: config.activity_timeout\n\t                }]],\n\t        [\":def_transport\", \"ws\", \"ws\", 3, \":ws_options\", \":ws_manager\"],\n\t        [\":def_transport\", \"wss\", \"ws\", 3, \":wss_options\", \":ws_manager\"],\n\t        [\":def_transport\", \"sockjs\", \"sockjs\", 1, \":sockjs_options\"],\n\t        [\":def_transport\", \"xhr_streaming\", \"xhr_streaming\", 1, \":sockjs_options\", \":streaming_manager\"],\n\t        [\":def_transport\", \"xdr_streaming\", \"xdr_streaming\", 1, \":sockjs_options\", \":streaming_manager\"],\n\t        [\":def_transport\", \"xhr_polling\", \"xhr_polling\", 1, \":sockjs_options\"],\n\t        [\":def_transport\", \"xdr_polling\", \"xdr_polling\", 1, \":sockjs_options\"],\n\t        [\":def\", \"ws_loop\", [\":sequential\", \":timeouts\", \":ws\"]],\n\t        [\":def\", \"wss_loop\", [\":sequential\", \":timeouts\", \":wss\"]],\n\t        [\":def\", \"sockjs_loop\", [\":sequential\", \":timeouts\", \":sockjs\"]],\n\t        [\":def\", \"streaming_loop\", [\":sequential\", \":timeouts\",\n\t                [\":if\", [\":is_supported\", \":xhr_streaming\"],\n\t                    \":xhr_streaming\",\n\t                    \":xdr_streaming\"\n\t                ]\n\t            ]],\n\t        [\":def\", \"polling_loop\", [\":sequential\", \":timeouts\",\n\t                [\":if\", [\":is_supported\", \":xhr_polling\"],\n\t                    \":xhr_polling\",\n\t                    \":xdr_polling\"\n\t                ]\n\t            ]],\n\t        [\":def\", \"http_loop\", [\":if\", [\":is_supported\", \":streaming_loop\"], [\n\t                    \":best_connected_ever\",\n\t                    \":streaming_loop\",\n\t                    [\":delayed\", 4000, [\":polling_loop\"]]\n\t                ], [\n\t                    \":polling_loop\"\n\t                ]]],\n\t        [\":def\", \"http_fallback_loop\",\n\t            [\":if\", [\":is_supported\", \":http_loop\"], [\n\t                    \":http_loop\"\n\t                ], [\n\t                    \":sockjs_loop\"\n\t                ]]\n\t        ],\n\t        [\":def\", \"strategy\",\n\t            [\":cached\", 1800000,\n\t                [\":first_connected\",\n\t                    [\":if\", [\":is_supported\", \":ws\"],\n\t                        wsStrategy,\n\t                        \":http_fallback_loop\"\n\t                    ]\n\t                ]\n\t            ]\n\t        ]\n\t    ];\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = getDefaultStrategy;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar dependencies_1 = __webpack_require__(3);\n\tfunction default_1() {\n\t    var self = this;\n\t    self.timeline.info(self.buildTimelineMessage({\n\t        transport: self.name + (self.options.encrypted ? \"s\" : \"\")\n\t    }));\n\t    if (self.hooks.isInitialized()) {\n\t        self.changeState(\"initialized\");\n\t    }\n\t    else if (self.hooks.file) {\n\t        self.changeState(\"initializing\");\n\t        dependencies_1.Dependencies.load(self.hooks.file, { encrypted: self.options.encrypted }, function (error, callback) {\n\t            if (self.hooks.isInitialized()) {\n\t                self.changeState(\"initialized\");\n\t                callback(true);\n\t            }\n\t            else {\n\t                if (error) {\n\t                    self.onError(error);\n\t                }\n\t                self.onClose();\n\t                callback(false);\n\t            }\n\t        });\n\t    }\n\t    else {\n\t        self.onClose();\n\t    }\n\t}\n\texports.__esModule = true;\n\texports[\"default\"] = default_1;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar http_xdomain_request_1 = __webpack_require__(30);\n\tvar http_1 = __webpack_require__(32);\n\thttp_1[\"default\"].createXDR = function (method, url) {\n\t    return this.createRequest(http_xdomain_request_1[\"default\"], method, url);\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = http_1[\"default\"];\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Errors = __webpack_require__(31);\n\tvar hooks = {\n\t    getRequest: function (socket) {\n\t        var xdr = new window.XDomainRequest();\n\t        xdr.ontimeout = function () {\n\t            socket.emit(\"error\", new Errors.RequestTimedOut());\n\t            socket.close();\n\t        };\n\t        xdr.onerror = function (e) {\n\t            socket.emit(\"error\", e);\n\t            socket.close();\n\t        };\n\t        xdr.onprogress = function () {\n\t            if (xdr.responseText && xdr.responseText.length > 0) {\n\t                socket.onChunk(200, xdr.responseText);\n\t            }\n\t        };\n\t        xdr.onload = function () {\n\t            if (xdr.responseText && xdr.responseText.length > 0) {\n\t                socket.onChunk(200, xdr.responseText);\n\t            }\n\t            socket.emit(\"finished\", 200);\n\t            socket.close();\n\t        };\n\t        return xdr;\n\t    },\n\t    abortRequest: function (xdr) {\n\t        xdr.ontimeout = xdr.onerror = xdr.onprogress = xdr.onload = null;\n\t        xdr.abort();\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = hooks;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar BadEventName = (function (_super) {\n\t    __extends(BadEventName, _super);\n\t    function BadEventName() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return BadEventName;\n\t}(Error));\n\texports.BadEventName = BadEventName;\n\tvar RequestTimedOut = (function (_super) {\n\t    __extends(RequestTimedOut, _super);\n\t    function RequestTimedOut() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return RequestTimedOut;\n\t}(Error));\n\texports.RequestTimedOut = RequestTimedOut;\n\tvar TransportPriorityTooLow = (function (_super) {\n\t    __extends(TransportPriorityTooLow, _super);\n\t    function TransportPriorityTooLow() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return TransportPriorityTooLow;\n\t}(Error));\n\texports.TransportPriorityTooLow = TransportPriorityTooLow;\n\tvar TransportClosed = (function (_super) {\n\t    __extends(TransportClosed, _super);\n\t    function TransportClosed() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return TransportClosed;\n\t}(Error));\n\texports.TransportClosed = TransportClosed;\n\tvar UnsupportedTransport = (function (_super) {\n\t    __extends(UnsupportedTransport, _super);\n\t    function UnsupportedTransport() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return UnsupportedTransport;\n\t}(Error));\n\texports.UnsupportedTransport = UnsupportedTransport;\n\tvar UnsupportedStrategy = (function (_super) {\n\t    __extends(UnsupportedStrategy, _super);\n\t    function UnsupportedStrategy() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return UnsupportedStrategy;\n\t}(Error));\n\texports.UnsupportedStrategy = UnsupportedStrategy;\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar http_request_1 = __webpack_require__(33);\n\tvar http_socket_1 = __webpack_require__(34);\n\tvar http_streaming_socket_1 = __webpack_require__(36);\n\tvar http_polling_socket_1 = __webpack_require__(37);\n\tvar http_xhr_request_1 = __webpack_require__(38);\n\tvar HTTP = {\n\t    createStreamingSocket: function (url) {\n\t        return this.createSocket(http_streaming_socket_1[\"default\"], url);\n\t    },\n\t    createPollingSocket: function (url) {\n\t        return this.createSocket(http_polling_socket_1[\"default\"], url);\n\t    },\n\t    createSocket: function (hooks, url) {\n\t        return new http_socket_1[\"default\"](hooks, url);\n\t    },\n\t    createXHR: function (method, url) {\n\t        return this.createRequest(http_xhr_request_1[\"default\"], method, url);\n\t    },\n\t    createRequest: function (hooks, method, url) {\n\t        return new http_request_1[\"default\"](hooks, method, url);\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = HTTP;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar runtime_1 = __webpack_require__(2);\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar MAX_BUFFER_LENGTH = 256 * 1024;\n\tvar HTTPRequest = (function (_super) {\n\t    __extends(HTTPRequest, _super);\n\t    function HTTPRequest(hooks, method, url) {\n\t        _super.call(this);\n\t        this.hooks = hooks;\n\t        this.method = method;\n\t        this.url = url;\n\t    }\n\t    HTTPRequest.prototype.start = function (payload) {\n\t        var _this = this;\n\t        this.position = 0;\n\t        this.xhr = this.hooks.getRequest(this);\n\t        this.unloader = function () {\n\t            _this.close();\n\t        };\n\t        runtime_1[\"default\"].addUnloadListener(this.unloader);\n\t        this.xhr.open(this.method, this.url, true);\n\t        if (this.xhr.setRequestHeader) {\n\t            this.xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\t        }\n\t        this.xhr.send(payload);\n\t    };\n\t    HTTPRequest.prototype.close = function () {\n\t        if (this.unloader) {\n\t            runtime_1[\"default\"].removeUnloadListener(this.unloader);\n\t            this.unloader = null;\n\t        }\n\t        if (this.xhr) {\n\t            this.hooks.abortRequest(this.xhr);\n\t            this.xhr = null;\n\t        }\n\t    };\n\t    HTTPRequest.prototype.onChunk = function (status, data) {\n\t        while (true) {\n\t            var chunk = this.advanceBuffer(data);\n\t            if (chunk) {\n\t                this.emit(\"chunk\", { status: status, data: chunk });\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (this.isBufferTooLong(data)) {\n\t            this.emit(\"buffer_too_long\");\n\t        }\n\t    };\n\t    HTTPRequest.prototype.advanceBuffer = function (buffer) {\n\t        var unreadData = buffer.slice(this.position);\n\t        var endOfLinePosition = unreadData.indexOf(\"\\n\");\n\t        if (endOfLinePosition !== -1) {\n\t            this.position += endOfLinePosition + 1;\n\t            return unreadData.slice(0, endOfLinePosition);\n\t        }\n\t        else {\n\t            return null;\n\t        }\n\t    };\n\t    HTTPRequest.prototype.isBufferTooLong = function (buffer) {\n\t        return this.position === buffer.length && buffer.length > MAX_BUFFER_LENGTH;\n\t    };\n\t    return HTTPRequest;\n\t}(dispatcher_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = HTTPRequest;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar state_1 = __webpack_require__(35);\n\tvar util_1 = __webpack_require__(11);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar autoIncrement = 1;\n\tvar HTTPSocket = (function () {\n\t    function HTTPSocket(hooks, url) {\n\t        this.hooks = hooks;\n\t        this.session = randomNumber(1000) + \"/\" + randomString(8);\n\t        this.location = getLocation(url);\n\t        this.readyState = state_1[\"default\"].CONNECTING;\n\t        this.openStream();\n\t    }\n\t    HTTPSocket.prototype.send = function (payload) {\n\t        return this.sendRaw(JSON.stringify([payload]));\n\t    };\n\t    HTTPSocket.prototype.ping = function () {\n\t        this.hooks.sendHeartbeat(this);\n\t    };\n\t    HTTPSocket.prototype.close = function (code, reason) {\n\t        this.onClose(code, reason, true);\n\t    };\n\t    HTTPSocket.prototype.sendRaw = function (payload) {\n\t        if (this.readyState === state_1[\"default\"].OPEN) {\n\t            try {\n\t                runtime_1[\"default\"].createSocketRequest(\"POST\", getUniqueURL(getSendURL(this.location, this.session))).start(payload);\n\t                return true;\n\t            }\n\t            catch (e) {\n\t                return false;\n\t            }\n\t        }\n\t        else {\n\t            return false;\n\t        }\n\t    };\n\t    HTTPSocket.prototype.reconnect = function () {\n\t        this.closeStream();\n\t        this.openStream();\n\t    };\n\t    ;\n\t    HTTPSocket.prototype.onClose = function (code, reason, wasClean) {\n\t        this.closeStream();\n\t        this.readyState = state_1[\"default\"].CLOSED;\n\t        if (this.onclose) {\n\t            this.onclose({\n\t                code: code,\n\t                reason: reason,\n\t                wasClean: wasClean\n\t            });\n\t        }\n\t    };\n\t    HTTPSocket.prototype.onChunk = function (chunk) {\n\t        if (chunk.status !== 200) {\n\t            return;\n\t        }\n\t        if (this.readyState === state_1[\"default\"].OPEN) {\n\t            this.onActivity();\n\t        }\n\t        var payload;\n\t        var type = chunk.data.slice(0, 1);\n\t        switch (type) {\n\t            case 'o':\n\t                payload = JSON.parse(chunk.data.slice(1) || '{}');\n\t                this.onOpen(payload);\n\t                break;\n\t            case 'a':\n\t                payload = JSON.parse(chunk.data.slice(1) || '[]');\n\t                for (var i = 0; i < payload.length; i++) {\n\t                    this.onEvent(payload[i]);\n\t                }\n\t                break;\n\t            case 'm':\n\t                payload = JSON.parse(chunk.data.slice(1) || 'null');\n\t                this.onEvent(payload);\n\t                break;\n\t            case 'h':\n\t                this.hooks.onHeartbeat(this);\n\t                break;\n\t            case 'c':\n\t                payload = JSON.parse(chunk.data.slice(1) || '[]');\n\t                this.onClose(payload[0], payload[1], true);\n\t                break;\n\t        }\n\t    };\n\t    HTTPSocket.prototype.onOpen = function (options) {\n\t        if (this.readyState === state_1[\"default\"].CONNECTING) {\n\t            if (options && options.hostname) {\n\t                this.location.base = replaceHost(this.location.base, options.hostname);\n\t            }\n\t            this.readyState = state_1[\"default\"].OPEN;\n\t            if (this.onopen) {\n\t                this.onopen();\n\t            }\n\t        }\n\t        else {\n\t            this.onClose(1006, \"Server lost session\", true);\n\t        }\n\t    };\n\t    HTTPSocket.prototype.onEvent = function (event) {\n\t        if (this.readyState === state_1[\"default\"].OPEN && this.onmessage) {\n\t            this.onmessage({ data: event });\n\t        }\n\t    };\n\t    HTTPSocket.prototype.onActivity = function () {\n\t        if (this.onactivity) {\n\t            this.onactivity();\n\t        }\n\t    };\n\t    HTTPSocket.prototype.onError = function (error) {\n\t        if (this.onerror) {\n\t            this.onerror(error);\n\t        }\n\t    };\n\t    HTTPSocket.prototype.openStream = function () {\n\t        var _this = this;\n\t        this.stream = runtime_1[\"default\"].createSocketRequest(\"POST\", getUniqueURL(this.hooks.getReceiveURL(this.location, this.session)));\n\t        this.stream.bind(\"chunk\", function (chunk) {\n\t            _this.onChunk(chunk);\n\t        });\n\t        this.stream.bind(\"finished\", function (status) {\n\t            _this.hooks.onFinished(_this, status);\n\t        });\n\t        this.stream.bind(\"buffer_too_long\", function () {\n\t            _this.reconnect();\n\t        });\n\t        try {\n\t            this.stream.start();\n\t        }\n\t        catch (error) {\n\t            util_1[\"default\"].defer(function () {\n\t                _this.onError(error);\n\t                _this.onClose(1006, \"Could not start streaming\", false);\n\t            });\n\t        }\n\t    };\n\t    HTTPSocket.prototype.closeStream = function () {\n\t        if (this.stream) {\n\t            this.stream.unbind_all();\n\t            this.stream.close();\n\t            this.stream = null;\n\t        }\n\t    };\n\t    return HTTPSocket;\n\t}());\n\tfunction getLocation(url) {\n\t    var parts = /([^\\?]*)\\/*(\\??.*)/.exec(url);\n\t    return {\n\t        base: parts[1],\n\t        queryString: parts[2]\n\t    };\n\t}\n\tfunction getSendURL(url, session) {\n\t    return url.base + \"/\" + session + \"/xhr_send\";\n\t}\n\tfunction getUniqueURL(url) {\n\t    var separator = (url.indexOf('?') === -1) ? \"?\" : \"&\";\n\t    return url + separator + \"t=\" + (+new Date()) + \"&n=\" + autoIncrement++;\n\t}\n\tfunction replaceHost(url, hostname) {\n\t    var urlParts = /(https?:\\/\\/)([^\\/:]+)((\\/|:)?.*)/.exec(url);\n\t    return urlParts[1] + hostname + urlParts[3];\n\t}\n\tfunction randomNumber(max) {\n\t    return Math.floor(Math.random() * max);\n\t}\n\tfunction randomString(length) {\n\t    var result = [];\n\t    for (var i = 0; i < length; i++) {\n\t        result.push(randomNumber(32).toString(32));\n\t    }\n\t    return result.join('');\n\t}\n\texports.__esModule = true;\n\texports[\"default\"] = HTTPSocket;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar State;\n\t(function (State) {\n\t    State[State[\"CONNECTING\"] = 0] = \"CONNECTING\";\n\t    State[State[\"OPEN\"] = 1] = \"OPEN\";\n\t    State[State[\"CLOSED\"] = 3] = \"CLOSED\";\n\t})(State || (State = {}));\n\texports.__esModule = true;\n\texports[\"default\"] = State;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar hooks = {\n\t    getReceiveURL: function (url, session) {\n\t        return url.base + \"/\" + session + \"/xhr_streaming\" + url.queryString;\n\t    },\n\t    onHeartbeat: function (socket) {\n\t        socket.sendRaw(\"[]\");\n\t    },\n\t    sendHeartbeat: function (socket) {\n\t        socket.sendRaw(\"[]\");\n\t    },\n\t    onFinished: function (socket, status) {\n\t        socket.onClose(1006, \"Connection interrupted (\" + status + \")\", false);\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = hooks;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar hooks = {\n\t    getReceiveURL: function (url, session) {\n\t        return url.base + \"/\" + session + \"/xhr\" + url.queryString;\n\t    },\n\t    onHeartbeat: function () {\n\t    },\n\t    sendHeartbeat: function (socket) {\n\t        socket.sendRaw(\"[]\");\n\t    },\n\t    onFinished: function (socket, status) {\n\t        if (status === 200) {\n\t            socket.reconnect();\n\t        }\n\t        else {\n\t            socket.onClose(1006, \"Connection interrupted (\" + status + \")\", false);\n\t        }\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = hooks;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar runtime_1 = __webpack_require__(2);\n\tvar hooks = {\n\t    getRequest: function (socket) {\n\t        var Constructor = runtime_1[\"default\"].getXHRAPI();\n\t        var xhr = new Constructor();\n\t        xhr.onreadystatechange = xhr.onprogress = function () {\n\t            switch (xhr.readyState) {\n\t                case 3:\n\t                    if (xhr.responseText && xhr.responseText.length > 0) {\n\t                        socket.onChunk(xhr.status, xhr.responseText);\n\t                    }\n\t                    break;\n\t                case 4:\n\t                    if (xhr.responseText && xhr.responseText.length > 0) {\n\t                        socket.onChunk(xhr.status, xhr.responseText);\n\t                    }\n\t                    socket.emit(\"finished\", xhr.status);\n\t                    socket.close();\n\t                    break;\n\t            }\n\t        };\n\t        return xhr;\n\t    },\n\t    abortRequest: function (xhr) {\n\t        xhr.onreadystatechange = null;\n\t        xhr.abort();\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = hooks;\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar util_1 = __webpack_require__(11);\n\tvar level_1 = __webpack_require__(40);\n\tvar Timeline = (function () {\n\t    function Timeline(key, session, options) {\n\t        this.key = key;\n\t        this.session = session;\n\t        this.events = [];\n\t        this.options = options || {};\n\t        this.sent = 0;\n\t        this.uniqueID = 0;\n\t    }\n\t    Timeline.prototype.log = function (level, event) {\n\t        if (level <= this.options.level) {\n\t            this.events.push(Collections.extend({}, event, { timestamp: util_1[\"default\"].now() }));\n\t            if (this.options.limit && this.events.length > this.options.limit) {\n\t                this.events.shift();\n\t            }\n\t        }\n\t    };\n\t    Timeline.prototype.error = function (event) {\n\t        this.log(level_1[\"default\"].ERROR, event);\n\t    };\n\t    Timeline.prototype.info = function (event) {\n\t        this.log(level_1[\"default\"].INFO, event);\n\t    };\n\t    Timeline.prototype.debug = function (event) {\n\t        this.log(level_1[\"default\"].DEBUG, event);\n\t    };\n\t    Timeline.prototype.isEmpty = function () {\n\t        return this.events.length === 0;\n\t    };\n\t    Timeline.prototype.send = function (sendfn, callback) {\n\t        var _this = this;\n\t        var data = Collections.extend({\n\t            session: this.session,\n\t            bundle: this.sent + 1,\n\t            key: this.key,\n\t            lib: \"js\",\n\t            version: this.options.version,\n\t            cluster: this.options.cluster,\n\t            features: this.options.features,\n\t            timeline: this.events\n\t        }, this.options.params);\n\t        this.events = [];\n\t        sendfn(data, function (error, result) {\n\t            if (!error) {\n\t                _this.sent++;\n\t            }\n\t            if (callback) {\n\t                callback(error, result);\n\t            }\n\t        });\n\t        return true;\n\t    };\n\t    Timeline.prototype.generateUniqueID = function () {\n\t        this.uniqueID++;\n\t        return this.uniqueID;\n\t    };\n\t    return Timeline;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Timeline;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar TimelineLevel;\n\t(function (TimelineLevel) {\n\t    TimelineLevel[TimelineLevel[\"ERROR\"] = 3] = \"ERROR\";\n\t    TimelineLevel[TimelineLevel[\"INFO\"] = 6] = \"INFO\";\n\t    TimelineLevel[TimelineLevel[\"DEBUG\"] = 7] = \"DEBUG\";\n\t})(TimelineLevel || (TimelineLevel = {}));\n\texports.__esModule = true;\n\texports[\"default\"] = TimelineLevel;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar util_1 = __webpack_require__(11);\n\tvar transport_manager_1 = __webpack_require__(42);\n\tvar Errors = __webpack_require__(31);\n\tvar transport_strategy_1 = __webpack_require__(56);\n\tvar sequential_strategy_1 = __webpack_require__(57);\n\tvar best_connected_ever_strategy_1 = __webpack_require__(58);\n\tvar cached_strategy_1 = __webpack_require__(59);\n\tvar delayed_strategy_1 = __webpack_require__(60);\n\tvar if_strategy_1 = __webpack_require__(61);\n\tvar first_connected_strategy_1 = __webpack_require__(62);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar Transports = runtime_1[\"default\"].Transports;\n\texports.build = function (scheme, options) {\n\t    var context = Collections.extend({}, globalContext, options);\n\t    return evaluate(scheme, context)[1].strategy;\n\t};\n\tvar UnsupportedStrategy = {\n\t    isSupported: function () {\n\t        return false;\n\t    },\n\t    connect: function (_, callback) {\n\t        var deferred = util_1[\"default\"].defer(function () {\n\t            callback(new Errors.UnsupportedStrategy());\n\t        });\n\t        return {\n\t            abort: function () {\n\t                deferred.ensureAborted();\n\t            },\n\t            forceMinPriority: function () { }\n\t        };\n\t    }\n\t};\n\tfunction returnWithOriginalContext(f) {\n\t    return function (context) {\n\t        return [f.apply(this, arguments), context];\n\t    };\n\t}\n\tvar globalContext = {\n\t    extend: function (context, first, second) {\n\t        return [Collections.extend({}, first, second), context];\n\t    },\n\t    def: function (context, name, value) {\n\t        if (context[name] !== undefined) {\n\t            throw \"Redefining symbol \" + name;\n\t        }\n\t        context[name] = value;\n\t        return [undefined, context];\n\t    },\n\t    def_transport: function (context, name, type, priority, options, manager) {\n\t        var transportClass = Transports[type];\n\t        if (!transportClass) {\n\t            throw new Errors.UnsupportedTransport(type);\n\t        }\n\t        var enabled = (!context.enabledTransports ||\n\t            Collections.arrayIndexOf(context.enabledTransports, name) !== -1) &&\n\t            (!context.disabledTransports ||\n\t                Collections.arrayIndexOf(context.disabledTransports, name) === -1);\n\t        var transport;\n\t        if (enabled) {\n\t            transport = new transport_strategy_1[\"default\"](name, priority, manager ? manager.getAssistant(transportClass) : transportClass, Collections.extend({\n\t                key: context.key,\n\t                encrypted: context.encrypted,\n\t                timeline: context.timeline,\n\t                ignoreNullOrigin: context.ignoreNullOrigin\n\t            }, options));\n\t        }\n\t        else {\n\t            transport = UnsupportedStrategy;\n\t        }\n\t        var newContext = context.def(context, name, transport)[1];\n\t        newContext.Transports = context.Transports || {};\n\t        newContext.Transports[name] = transport;\n\t        return [undefined, newContext];\n\t    },\n\t    transport_manager: returnWithOriginalContext(function (_, options) {\n\t        return new transport_manager_1[\"default\"](options);\n\t    }),\n\t    sequential: returnWithOriginalContext(function (_, options) {\n\t        var strategies = Array.prototype.slice.call(arguments, 2);\n\t        return new sequential_strategy_1[\"default\"](strategies, options);\n\t    }),\n\t    cached: returnWithOriginalContext(function (context, ttl, strategy) {\n\t        return new cached_strategy_1[\"default\"](strategy, context.Transports, {\n\t            ttl: ttl,\n\t            timeline: context.timeline,\n\t            encrypted: context.encrypted\n\t        });\n\t    }),\n\t    first_connected: returnWithOriginalContext(function (_, strategy) {\n\t        return new first_connected_strategy_1[\"default\"](strategy);\n\t    }),\n\t    best_connected_ever: returnWithOriginalContext(function () {\n\t        var strategies = Array.prototype.slice.call(arguments, 1);\n\t        return new best_connected_ever_strategy_1[\"default\"](strategies);\n\t    }),\n\t    delayed: returnWithOriginalContext(function (_, delay, strategy) {\n\t        return new delayed_strategy_1[\"default\"](strategy, { delay: delay });\n\t    }),\n\t    \"if\": returnWithOriginalContext(function (_, test, trueBranch, falseBranch) {\n\t        return new if_strategy_1[\"default\"](test, trueBranch, falseBranch);\n\t    }),\n\t    is_supported: returnWithOriginalContext(function (_, strategy) {\n\t        return function () {\n\t            return strategy.isSupported();\n\t        };\n\t    })\n\t};\n\tfunction isSymbol(expression) {\n\t    return (typeof expression === \"string\") && expression.charAt(0) === \":\";\n\t}\n\tfunction getSymbolValue(expression, context) {\n\t    return context[expression.slice(1)];\n\t}\n\tfunction evaluateListOfExpressions(expressions, context) {\n\t    if (expressions.length === 0) {\n\t        return [[], context];\n\t    }\n\t    var head = evaluate(expressions[0], context);\n\t    var tail = evaluateListOfExpressions(expressions.slice(1), head[1]);\n\t    return [[head[0]].concat(tail[0]), tail[1]];\n\t}\n\tfunction evaluateString(expression, context) {\n\t    if (!isSymbol(expression)) {\n\t        return [expression, context];\n\t    }\n\t    var value = getSymbolValue(expression, context);\n\t    if (value === undefined) {\n\t        throw \"Undefined symbol \" + expression;\n\t    }\n\t    return [value, context];\n\t}\n\tfunction evaluateArray(expression, context) {\n\t    if (isSymbol(expression[0])) {\n\t        var f = getSymbolValue(expression[0], context);\n\t        if (expression.length > 1) {\n\t            if (typeof f !== \"function\") {\n\t                throw \"Calling non-function \" + expression[0];\n\t            }\n\t            var args = [Collections.extend({}, context)].concat(Collections.map(expression.slice(1), function (arg) {\n\t                return evaluate(arg, Collections.extend({}, context))[0];\n\t            }));\n\t            return f.apply(this, args);\n\t        }\n\t        else {\n\t            return [f, context];\n\t        }\n\t    }\n\t    else {\n\t        return evaluateListOfExpressions(expression, context);\n\t    }\n\t}\n\tfunction evaluate(expression, context) {\n\t    if (typeof expression === \"string\") {\n\t        return evaluateString(expression, context);\n\t    }\n\t    else if (typeof expression === \"object\") {\n\t        if (expression instanceof Array && expression.length > 0) {\n\t            return evaluateArray(expression, context);\n\t        }\n\t    }\n\t    return [expression, context];\n\t}\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar factory_1 = __webpack_require__(43);\n\tvar TransportManager = (function () {\n\t    function TransportManager(options) {\n\t        this.options = options || {};\n\t        this.livesLeft = this.options.lives || Infinity;\n\t    }\n\t    TransportManager.prototype.getAssistant = function (transport) {\n\t        return factory_1[\"default\"].createAssistantToTheTransportManager(this, transport, {\n\t            minPingDelay: this.options.minPingDelay,\n\t            maxPingDelay: this.options.maxPingDelay\n\t        });\n\t    };\n\t    TransportManager.prototype.isAlive = function () {\n\t        return this.livesLeft > 0;\n\t    };\n\t    TransportManager.prototype.reportDeath = function () {\n\t        this.livesLeft -= 1;\n\t    };\n\t    return TransportManager;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = TransportManager;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assistant_to_the_transport_manager_1 = __webpack_require__(44);\n\tvar handshake_1 = __webpack_require__(45);\n\tvar pusher_authorizer_1 = __webpack_require__(48);\n\tvar timeline_sender_1 = __webpack_require__(49);\n\tvar presence_channel_1 = __webpack_require__(50);\n\tvar private_channel_1 = __webpack_require__(51);\n\tvar channel_1 = __webpack_require__(52);\n\tvar connection_manager_1 = __webpack_require__(54);\n\tvar channels_1 = __webpack_require__(55);\n\tvar Factory = {\n\t    createChannels: function () {\n\t        return new channels_1[\"default\"]();\n\t    },\n\t    createConnectionManager: function (key, options) {\n\t        return new connection_manager_1[\"default\"](key, options);\n\t    },\n\t    createChannel: function (name, pusher) {\n\t        return new channel_1[\"default\"](name, pusher);\n\t    },\n\t    createPrivateChannel: function (name, pusher) {\n\t        return new private_channel_1[\"default\"](name, pusher);\n\t    },\n\t    createPresenceChannel: function (name, pusher) {\n\t        return new presence_channel_1[\"default\"](name, pusher);\n\t    },\n\t    createTimelineSender: function (timeline, options) {\n\t        return new timeline_sender_1[\"default\"](timeline, options);\n\t    },\n\t    createAuthorizer: function (channel, options) {\n\t        if (options.authorizer) {\n\t            return options.authorizer(channel, options);\n\t        }\n\t        return new pusher_authorizer_1[\"default\"](channel, options);\n\t    },\n\t    createHandshake: function (transport, callback) {\n\t        return new handshake_1[\"default\"](transport, callback);\n\t    },\n\t    createAssistantToTheTransportManager: function (manager, transport, options) {\n\t        return new assistant_to_the_transport_manager_1[\"default\"](manager, transport, options);\n\t    }\n\t};\n\texports.__esModule = true;\n\texports[\"default\"] = Factory;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util_1 = __webpack_require__(11);\n\tvar Collections = __webpack_require__(9);\n\tvar AssistantToTheTransportManager = (function () {\n\t    function AssistantToTheTransportManager(manager, transport, options) {\n\t        this.manager = manager;\n\t        this.transport = transport;\n\t        this.minPingDelay = options.minPingDelay;\n\t        this.maxPingDelay = options.maxPingDelay;\n\t        this.pingDelay = undefined;\n\t    }\n\t    AssistantToTheTransportManager.prototype.createConnection = function (name, priority, key, options) {\n\t        var _this = this;\n\t        options = Collections.extend({}, options, {\n\t            activityTimeout: this.pingDelay\n\t        });\n\t        var connection = this.transport.createConnection(name, priority, key, options);\n\t        var openTimestamp = null;\n\t        var onOpen = function () {\n\t            connection.unbind(\"open\", onOpen);\n\t            connection.bind(\"closed\", onClosed);\n\t            openTimestamp = util_1[\"default\"].now();\n\t        };\n\t        var onClosed = function (closeEvent) {\n\t            connection.unbind(\"closed\", onClosed);\n\t            if (closeEvent.code === 1002 || closeEvent.code === 1003) {\n\t                _this.manager.reportDeath();\n\t            }\n\t            else if (!closeEvent.wasClean && openTimestamp) {\n\t                var lifespan = util_1[\"default\"].now() - openTimestamp;\n\t                if (lifespan < 2 * _this.maxPingDelay) {\n\t                    _this.manager.reportDeath();\n\t                    _this.pingDelay = Math.max(lifespan / 2, _this.minPingDelay);\n\t                }\n\t            }\n\t        };\n\t        connection.bind(\"open\", onOpen);\n\t        return connection;\n\t    };\n\t    AssistantToTheTransportManager.prototype.isSupported = function (environment) {\n\t        return this.manager.isAlive() && this.transport.isSupported(environment);\n\t    };\n\t    return AssistantToTheTransportManager;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = AssistantToTheTransportManager;\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar Protocol = __webpack_require__(46);\n\tvar connection_1 = __webpack_require__(47);\n\tvar Handshake = (function () {\n\t    function Handshake(transport, callback) {\n\t        this.transport = transport;\n\t        this.callback = callback;\n\t        this.bindListeners();\n\t    }\n\t    Handshake.prototype.close = function () {\n\t        this.unbindListeners();\n\t        this.transport.close();\n\t    };\n\t    Handshake.prototype.bindListeners = function () {\n\t        var _this = this;\n\t        this.onMessage = function (m) {\n\t            _this.unbindListeners();\n\t            var result;\n\t            try {\n\t                result = Protocol.processHandshake(m);\n\t            }\n\t            catch (e) {\n\t                _this.finish(\"error\", { error: e });\n\t                _this.transport.close();\n\t                return;\n\t            }\n\t            if (result.action === \"connected\") {\n\t                _this.finish(\"connected\", {\n\t                    connection: new connection_1[\"default\"](result.id, _this.transport),\n\t                    activityTimeout: result.activityTimeout\n\t                });\n\t            }\n\t            else {\n\t                _this.finish(result.action, { error: result.error });\n\t                _this.transport.close();\n\t            }\n\t        };\n\t        this.onClosed = function (closeEvent) {\n\t            _this.unbindListeners();\n\t            var action = Protocol.getCloseAction(closeEvent) || \"backoff\";\n\t            var error = Protocol.getCloseError(closeEvent);\n\t            _this.finish(action, { error: error });\n\t        };\n\t        this.transport.bind(\"message\", this.onMessage);\n\t        this.transport.bind(\"closed\", this.onClosed);\n\t    };\n\t    Handshake.prototype.unbindListeners = function () {\n\t        this.transport.unbind(\"message\", this.onMessage);\n\t        this.transport.unbind(\"closed\", this.onClosed);\n\t    };\n\t    Handshake.prototype.finish = function (action, params) {\n\t        this.callback(Collections.extend({ transport: this.transport, action: action }, params));\n\t    };\n\t    return Handshake;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Handshake;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.decodeMessage = function (message) {\n\t    try {\n\t        var params = JSON.parse(message.data);\n\t        if (typeof params.data === 'string') {\n\t            try {\n\t                params.data = JSON.parse(params.data);\n\t            }\n\t            catch (e) {\n\t                if (!(e instanceof SyntaxError)) {\n\t                    throw e;\n\t                }\n\t            }\n\t        }\n\t        return params;\n\t    }\n\t    catch (e) {\n\t        throw { type: 'MessageParseError', error: e, data: message.data };\n\t    }\n\t};\n\texports.encodeMessage = function (message) {\n\t    return JSON.stringify(message);\n\t};\n\texports.processHandshake = function (message) {\n\t    message = exports.decodeMessage(message);\n\t    if (message.event === \"pusher:connection_established\") {\n\t        if (!message.data.activity_timeout) {\n\t            throw \"No activity timeout specified in handshake\";\n\t        }\n\t        return {\n\t            action: \"connected\",\n\t            id: message.data.socket_id,\n\t            activityTimeout: message.data.activity_timeout * 1000\n\t        };\n\t    }\n\t    else if (message.event === \"pusher:error\") {\n\t        return {\n\t            action: this.getCloseAction(message.data),\n\t            error: this.getCloseError(message.data)\n\t        };\n\t    }\n\t    else {\n\t        throw \"Invalid handshake\";\n\t    }\n\t};\n\texports.getCloseAction = function (closeEvent) {\n\t    if (closeEvent.code < 4000) {\n\t        if (closeEvent.code >= 1002 && closeEvent.code <= 1004) {\n\t            return \"backoff\";\n\t        }\n\t        else {\n\t            return null;\n\t        }\n\t    }\n\t    else if (closeEvent.code === 4000) {\n\t        return \"ssl_only\";\n\t    }\n\t    else if (closeEvent.code < 4100) {\n\t        return \"refused\";\n\t    }\n\t    else if (closeEvent.code < 4200) {\n\t        return \"backoff\";\n\t    }\n\t    else if (closeEvent.code < 4300) {\n\t        return \"retry\";\n\t    }\n\t    else {\n\t        return \"refused\";\n\t    }\n\t};\n\texports.getCloseError = function (closeEvent) {\n\t    if (closeEvent.code !== 1000 && closeEvent.code !== 1001) {\n\t        return {\n\t            type: 'PusherError',\n\t            data: {\n\t                code: closeEvent.code,\n\t                message: closeEvent.reason || closeEvent.message\n\t            }\n\t        };\n\t    }\n\t    else {\n\t        return null;\n\t    }\n\t};\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Collections = __webpack_require__(9);\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar Protocol = __webpack_require__(46);\n\tvar logger_1 = __webpack_require__(8);\n\tvar Connection = (function (_super) {\n\t    __extends(Connection, _super);\n\t    function Connection(id, transport) {\n\t        _super.call(this);\n\t        this.id = id;\n\t        this.transport = transport;\n\t        this.activityTimeout = transport.activityTimeout;\n\t        this.bindListeners();\n\t    }\n\t    Connection.prototype.handlesActivityChecks = function () {\n\t        return this.transport.handlesActivityChecks();\n\t    };\n\t    Connection.prototype.send = function (data) {\n\t        return this.transport.send(data);\n\t    };\n\t    Connection.prototype.send_event = function (name, data, channel) {\n\t        var message = { event: name, data: data };\n\t        if (channel) {\n\t            message.channel = channel;\n\t        }\n\t        logger_1[\"default\"].debug('Event sent', message);\n\t        return this.send(Protocol.encodeMessage(message));\n\t    };\n\t    Connection.prototype.ping = function () {\n\t        if (this.transport.supportsPing()) {\n\t            this.transport.ping();\n\t        }\n\t        else {\n\t            this.send_event('pusher:ping', {});\n\t        }\n\t    };\n\t    Connection.prototype.close = function () {\n\t        this.transport.close();\n\t    };\n\t    Connection.prototype.bindListeners = function () {\n\t        var _this = this;\n\t        var listeners = {\n\t            message: function (m) {\n\t                var message;\n\t                try {\n\t                    message = Protocol.decodeMessage(m);\n\t                }\n\t                catch (e) {\n\t                    _this.emit('error', {\n\t                        type: 'MessageParseError',\n\t                        error: e,\n\t                        data: m.data\n\t                    });\n\t                }\n\t                if (message !== undefined) {\n\t                    logger_1[\"default\"].debug('Event recd', message);\n\t                    switch (message.event) {\n\t                        case 'pusher:error':\n\t                            _this.emit('error', { type: 'PusherError', data: message.data });\n\t                            break;\n\t                        case 'pusher:ping':\n\t                            _this.emit(\"ping\");\n\t                            break;\n\t                        case 'pusher:pong':\n\t                            _this.emit(\"pong\");\n\t                            break;\n\t                    }\n\t                    _this.emit('message', message);\n\t                }\n\t            },\n\t            activity: function () {\n\t                _this.emit(\"activity\");\n\t            },\n\t            error: function (error) {\n\t                _this.emit(\"error\", { type: \"WebSocketError\", error: error });\n\t            },\n\t            closed: function (closeEvent) {\n\t                unbindListeners();\n\t                if (closeEvent && closeEvent.code) {\n\t                    _this.handleCloseEvent(closeEvent);\n\t                }\n\t                _this.transport = null;\n\t                _this.emit(\"closed\");\n\t            }\n\t        };\n\t        var unbindListeners = function () {\n\t            Collections.objectApply(listeners, function (listener, event) {\n\t                _this.transport.unbind(event, listener);\n\t            });\n\t        };\n\t        Collections.objectApply(listeners, function (listener, event) {\n\t            _this.transport.bind(event, listener);\n\t        });\n\t    };\n\t    Connection.prototype.handleCloseEvent = function (closeEvent) {\n\t        var action = Protocol.getCloseAction(closeEvent);\n\t        var error = Protocol.getCloseError(closeEvent);\n\t        if (error) {\n\t            this.emit('error', error);\n\t        }\n\t        if (action) {\n\t            this.emit(action);\n\t        }\n\t    };\n\t    return Connection;\n\t}(dispatcher_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = Connection;\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar runtime_1 = __webpack_require__(2);\n\tvar PusherAuthorizer = (function () {\n\t    function PusherAuthorizer(channel, options) {\n\t        this.channel = channel;\n\t        var authTransport = options.authTransport;\n\t        if (typeof runtime_1[\"default\"].getAuthorizers()[authTransport] === \"undefined\") {\n\t            throw \"'\" + authTransport + \"' is not a recognized auth transport\";\n\t        }\n\t        this.type = authTransport;\n\t        this.options = options;\n\t        this.authOptions = (options || {}).auth || {};\n\t    }\n\t    PusherAuthorizer.prototype.composeQuery = function (socketId) {\n\t        var query = 'socket_id=' + encodeURIComponent(socketId) +\n\t            '&channel_name=' + encodeURIComponent(this.channel.name);\n\t        for (var i in this.authOptions.params) {\n\t            query += \"&\" + encodeURIComponent(i) + \"=\" + encodeURIComponent(this.authOptions.params[i]);\n\t        }\n\t        return query;\n\t    };\n\t    PusherAuthorizer.prototype.authorize = function (socketId, callback) {\n\t        PusherAuthorizer.authorizers = PusherAuthorizer.authorizers || runtime_1[\"default\"].getAuthorizers();\n\t        return PusherAuthorizer.authorizers[this.type].call(this, runtime_1[\"default\"], socketId, callback);\n\t    };\n\t    return PusherAuthorizer;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = PusherAuthorizer;\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar runtime_1 = __webpack_require__(2);\n\tvar TimelineSender = (function () {\n\t    function TimelineSender(timeline, options) {\n\t        this.timeline = timeline;\n\t        this.options = options || {};\n\t    }\n\t    TimelineSender.prototype.send = function (encrypted, callback) {\n\t        if (this.timeline.isEmpty()) {\n\t            return;\n\t        }\n\t        this.timeline.send(runtime_1[\"default\"].TimelineTransport.getAgent(this, encrypted), callback);\n\t    };\n\t    return TimelineSender;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = TimelineSender;\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar private_channel_1 = __webpack_require__(51);\n\tvar logger_1 = __webpack_require__(8);\n\tvar members_1 = __webpack_require__(53);\n\tvar url_store_1 = __webpack_require__(14);\n\tvar PresenceChannel = (function (_super) {\n\t    __extends(PresenceChannel, _super);\n\t    function PresenceChannel(name, pusher) {\n\t        _super.call(this, name, pusher);\n\t        this.members = new members_1[\"default\"]();\n\t    }\n\t    PresenceChannel.prototype.authorize = function (socketId, callback) {\n\t        var _this = this;\n\t        _super.prototype.authorize.call(this, socketId, function (error, authData) {\n\t            if (!error) {\n\t                if (authData.channel_data === undefined) {\n\t                    var suffix = url_store_1[\"default\"].buildLogSuffix(\"authenticationEndpoint\");\n\t                    logger_1[\"default\"].warn((\"Invalid auth response for channel '\" + _this.name + \"',\") +\n\t                        (\"expected 'channel_data' field. \" + suffix));\n\t                    callback(\"Invalid auth response\");\n\t                    return;\n\t                }\n\t                var channelData = JSON.parse(authData.channel_data);\n\t                _this.members.setMyID(channelData.user_id);\n\t            }\n\t            callback(error, authData);\n\t        });\n\t    };\n\t    PresenceChannel.prototype.handleEvent = function (event, data) {\n\t        switch (event) {\n\t            case \"pusher_internal:subscription_succeeded\":\n\t                this.subscriptionPending = false;\n\t                this.subscribed = true;\n\t                if (this.subscriptionCancelled) {\n\t                    this.pusher.unsubscribe(this.name);\n\t                }\n\t                else {\n\t                    this.members.onSubscription(data);\n\t                    this.emit(\"pusher:subscription_succeeded\", this.members);\n\t                }\n\t                break;\n\t            case \"pusher_internal:member_added\":\n\t                var addedMember = this.members.addMember(data);\n\t                this.emit('pusher:member_added', addedMember);\n\t                break;\n\t            case \"pusher_internal:member_removed\":\n\t                var removedMember = this.members.removeMember(data);\n\t                if (removedMember) {\n\t                    this.emit('pusher:member_removed', removedMember);\n\t                }\n\t                break;\n\t            default:\n\t                private_channel_1[\"default\"].prototype.handleEvent.call(this, event, data);\n\t        }\n\t    };\n\t    PresenceChannel.prototype.disconnect = function () {\n\t        this.members.reset();\n\t        _super.prototype.disconnect.call(this);\n\t    };\n\t    return PresenceChannel;\n\t}(private_channel_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = PresenceChannel;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar factory_1 = __webpack_require__(43);\n\tvar channel_1 = __webpack_require__(52);\n\tvar PrivateChannel = (function (_super) {\n\t    __extends(PrivateChannel, _super);\n\t    function PrivateChannel() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    PrivateChannel.prototype.authorize = function (socketId, callback) {\n\t        var authorizer = factory_1[\"default\"].createAuthorizer(this, this.pusher.config);\n\t        return authorizer.authorize(socketId, callback);\n\t    };\n\t    return PrivateChannel;\n\t}(channel_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = PrivateChannel;\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar Errors = __webpack_require__(31);\n\tvar logger_1 = __webpack_require__(8);\n\tvar Channel = (function (_super) {\n\t    __extends(Channel, _super);\n\t    function Channel(name, pusher) {\n\t        _super.call(this, function (event, data) {\n\t            logger_1[\"default\"].debug('No callbacks on ' + name + ' for ' + event);\n\t        });\n\t        this.name = name;\n\t        this.pusher = pusher;\n\t        this.subscribed = false;\n\t        this.subscriptionPending = false;\n\t        this.subscriptionCancelled = false;\n\t    }\n\t    Channel.prototype.authorize = function (socketId, callback) {\n\t        return callback(false, {});\n\t    };\n\t    Channel.prototype.trigger = function (event, data) {\n\t        if (event.indexOf(\"client-\") !== 0) {\n\t            throw new Errors.BadEventName(\"Event '\" + event + \"' does not start with 'client-'\");\n\t        }\n\t        return this.pusher.send_event(event, data, this.name);\n\t    };\n\t    Channel.prototype.disconnect = function () {\n\t        this.subscribed = false;\n\t        this.subscriptionPending = false;\n\t    };\n\t    Channel.prototype.handleEvent = function (event, data) {\n\t        if (event.indexOf(\"pusher_internal:\") === 0) {\n\t            if (event === \"pusher_internal:subscription_succeeded\") {\n\t                this.subscriptionPending = false;\n\t                this.subscribed = true;\n\t                if (this.subscriptionCancelled) {\n\t                    this.pusher.unsubscribe(this.name);\n\t                }\n\t                else {\n\t                    this.emit(\"pusher:subscription_succeeded\", data);\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            this.emit(event, data);\n\t        }\n\t    };\n\t    Channel.prototype.subscribe = function () {\n\t        var _this = this;\n\t        if (this.subscribed) {\n\t            return;\n\t        }\n\t        this.subscriptionPending = true;\n\t        this.subscriptionCancelled = false;\n\t        this.authorize(this.pusher.connection.socket_id, function (error, data) {\n\t            if (error) {\n\t                _this.handleEvent('pusher:subscription_error', data);\n\t            }\n\t            else {\n\t                _this.pusher.send_event('pusher:subscribe', {\n\t                    auth: data.auth,\n\t                    channel_data: data.channel_data,\n\t                    channel: _this.name\n\t                });\n\t            }\n\t        });\n\t    };\n\t    Channel.prototype.unsubscribe = function () {\n\t        this.subscribed = false;\n\t        this.pusher.send_event('pusher:unsubscribe', {\n\t            channel: this.name\n\t        });\n\t    };\n\t    Channel.prototype.cancelSubscription = function () {\n\t        this.subscriptionCancelled = true;\n\t    };\n\t    Channel.prototype.reinstateSubscription = function () {\n\t        this.subscriptionCancelled = false;\n\t    };\n\t    return Channel;\n\t}(dispatcher_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = Channel;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar Members = (function () {\n\t    function Members() {\n\t        this.reset();\n\t    }\n\t    Members.prototype.get = function (id) {\n\t        if (Object.prototype.hasOwnProperty.call(this.members, id)) {\n\t            return {\n\t                id: id,\n\t                info: this.members[id]\n\t            };\n\t        }\n\t        else {\n\t            return null;\n\t        }\n\t    };\n\t    Members.prototype.each = function (callback) {\n\t        var _this = this;\n\t        Collections.objectApply(this.members, function (member, id) {\n\t            callback(_this.get(id));\n\t        });\n\t    };\n\t    Members.prototype.setMyID = function (id) {\n\t        this.myID = id;\n\t    };\n\t    Members.prototype.onSubscription = function (subscriptionData) {\n\t        this.members = subscriptionData.presence.hash;\n\t        this.count = subscriptionData.presence.count;\n\t        this.me = this.get(this.myID);\n\t    };\n\t    Members.prototype.addMember = function (memberData) {\n\t        if (this.get(memberData.user_id) === null) {\n\t            this.count++;\n\t        }\n\t        this.members[memberData.user_id] = memberData.user_info;\n\t        return this.get(memberData.user_id);\n\t    };\n\t    Members.prototype.removeMember = function (memberData) {\n\t        var member = this.get(memberData.user_id);\n\t        if (member) {\n\t            delete this.members[memberData.user_id];\n\t            this.count--;\n\t        }\n\t        return member;\n\t    };\n\t    Members.prototype.reset = function () {\n\t        this.members = {};\n\t        this.count = 0;\n\t        this.myID = null;\n\t        this.me = null;\n\t    };\n\t    return Members;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Members;\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar dispatcher_1 = __webpack_require__(24);\n\tvar timers_1 = __webpack_require__(12);\n\tvar logger_1 = __webpack_require__(8);\n\tvar Collections = __webpack_require__(9);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar ConnectionManager = (function (_super) {\n\t    __extends(ConnectionManager, _super);\n\t    function ConnectionManager(key, options) {\n\t        var _this = this;\n\t        _super.call(this);\n\t        this.key = key;\n\t        this.options = options || {};\n\t        this.state = \"initialized\";\n\t        this.connection = null;\n\t        this.encrypted = !!options.encrypted;\n\t        this.timeline = this.options.timeline;\n\t        this.connectionCallbacks = this.buildConnectionCallbacks();\n\t        this.errorCallbacks = this.buildErrorCallbacks();\n\t        this.handshakeCallbacks = this.buildHandshakeCallbacks(this.errorCallbacks);\n\t        var Network = runtime_1[\"default\"].getNetwork();\n\t        Network.bind(\"online\", function () {\n\t            _this.timeline.info({ netinfo: \"online\" });\n\t            if (_this.state === \"connecting\" || _this.state === \"unavailable\") {\n\t                _this.retryIn(0);\n\t            }\n\t        });\n\t        Network.bind(\"offline\", function () {\n\t            _this.timeline.info({ netinfo: \"offline\" });\n\t            if (_this.connection) {\n\t                _this.sendActivityCheck();\n\t            }\n\t        });\n\t        this.updateStrategy();\n\t    }\n\t    ConnectionManager.prototype.connect = function () {\n\t        if (this.connection || this.runner) {\n\t            return;\n\t        }\n\t        if (!this.strategy.isSupported()) {\n\t            this.updateState(\"failed\");\n\t            return;\n\t        }\n\t        this.updateState(\"connecting\");\n\t        this.startConnecting();\n\t        this.setUnavailableTimer();\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.send = function (data) {\n\t        if (this.connection) {\n\t            return this.connection.send(data);\n\t        }\n\t        else {\n\t            return false;\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.send_event = function (name, data, channel) {\n\t        if (this.connection) {\n\t            return this.connection.send_event(name, data, channel);\n\t        }\n\t        else {\n\t            return false;\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.disconnect = function () {\n\t        this.disconnectInternally();\n\t        this.updateState(\"disconnected\");\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.isEncrypted = function () {\n\t        return this.encrypted;\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.startConnecting = function () {\n\t        var _this = this;\n\t        var callback = function (error, handshake) {\n\t            if (error) {\n\t                _this.runner = _this.strategy.connect(0, callback);\n\t            }\n\t            else {\n\t                if (handshake.action === \"error\") {\n\t                    _this.emit(\"error\", { type: \"HandshakeError\", error: handshake.error });\n\t                    _this.timeline.error({ handshakeError: handshake.error });\n\t                }\n\t                else {\n\t                    _this.abortConnecting();\n\t                    _this.handshakeCallbacks[handshake.action](handshake);\n\t                }\n\t            }\n\t        };\n\t        this.runner = this.strategy.connect(0, callback);\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.abortConnecting = function () {\n\t        if (this.runner) {\n\t            this.runner.abort();\n\t            this.runner = null;\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.disconnectInternally = function () {\n\t        this.abortConnecting();\n\t        this.clearRetryTimer();\n\t        this.clearUnavailableTimer();\n\t        if (this.connection) {\n\t            var connection = this.abandonConnection();\n\t            connection.close();\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.updateStrategy = function () {\n\t        this.strategy = this.options.getStrategy({\n\t            key: this.key,\n\t            timeline: this.timeline,\n\t            encrypted: this.encrypted\n\t        });\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.retryIn = function (delay) {\n\t        var _this = this;\n\t        this.timeline.info({ action: \"retry\", delay: delay });\n\t        if (delay > 0) {\n\t            this.emit(\"connecting_in\", Math.round(delay / 1000));\n\t        }\n\t        this.retryTimer = new timers_1.OneOffTimer(delay || 0, function () {\n\t            _this.disconnectInternally();\n\t            _this.connect();\n\t        });\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.clearRetryTimer = function () {\n\t        if (this.retryTimer) {\n\t            this.retryTimer.ensureAborted();\n\t            this.retryTimer = null;\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.setUnavailableTimer = function () {\n\t        var _this = this;\n\t        this.unavailableTimer = new timers_1.OneOffTimer(this.options.unavailableTimeout, function () {\n\t            _this.updateState(\"unavailable\");\n\t        });\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.clearUnavailableTimer = function () {\n\t        if (this.unavailableTimer) {\n\t            this.unavailableTimer.ensureAborted();\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.sendActivityCheck = function () {\n\t        var _this = this;\n\t        this.stopActivityCheck();\n\t        this.connection.ping();\n\t        this.activityTimer = new timers_1.OneOffTimer(this.options.pongTimeout, function () {\n\t            _this.timeline.error({ pong_timed_out: _this.options.pongTimeout });\n\t            _this.retryIn(0);\n\t        });\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.resetActivityCheck = function () {\n\t        var _this = this;\n\t        this.stopActivityCheck();\n\t        if (this.connection && !this.connection.handlesActivityChecks()) {\n\t            this.activityTimer = new timers_1.OneOffTimer(this.activityTimeout, function () {\n\t                _this.sendActivityCheck();\n\t            });\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.stopActivityCheck = function () {\n\t        if (this.activityTimer) {\n\t            this.activityTimer.ensureAborted();\n\t        }\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.buildConnectionCallbacks = function () {\n\t        var _this = this;\n\t        return {\n\t            message: function (message) {\n\t                _this.resetActivityCheck();\n\t                _this.emit('message', message);\n\t            },\n\t            ping: function () {\n\t                _this.send_event('pusher:pong', {});\n\t            },\n\t            activity: function () {\n\t                _this.resetActivityCheck();\n\t            },\n\t            error: function (error) {\n\t                _this.emit(\"error\", { type: \"WebSocketError\", error: error });\n\t            },\n\t            closed: function () {\n\t                _this.abandonConnection();\n\t                if (_this.shouldRetry()) {\n\t                    _this.retryIn(1000);\n\t                }\n\t            }\n\t        };\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.buildHandshakeCallbacks = function (errorCallbacks) {\n\t        var _this = this;\n\t        return Collections.extend({}, errorCallbacks, {\n\t            connected: function (handshake) {\n\t                _this.activityTimeout = Math.min(_this.options.activityTimeout, handshake.activityTimeout, handshake.connection.activityTimeout || Infinity);\n\t                _this.clearUnavailableTimer();\n\t                _this.setConnection(handshake.connection);\n\t                _this.socket_id = _this.connection.id;\n\t                _this.updateState(\"connected\", { socket_id: _this.socket_id });\n\t            }\n\t        });\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.buildErrorCallbacks = function () {\n\t        var _this = this;\n\t        var withErrorEmitted = function (callback) {\n\t            return function (result) {\n\t                if (result.error) {\n\t                    _this.emit(\"error\", { type: \"WebSocketError\", error: result.error });\n\t                }\n\t                callback(result);\n\t            };\n\t        };\n\t        return {\n\t            ssl_only: withErrorEmitted(function () {\n\t                _this.encrypted = true;\n\t                _this.updateStrategy();\n\t                _this.retryIn(0);\n\t            }),\n\t            refused: withErrorEmitted(function () {\n\t                _this.disconnect();\n\t            }),\n\t            backoff: withErrorEmitted(function () {\n\t                _this.retryIn(1000);\n\t            }),\n\t            retry: withErrorEmitted(function () {\n\t                _this.retryIn(0);\n\t            })\n\t        };\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.setConnection = function (connection) {\n\t        this.connection = connection;\n\t        for (var event in this.connectionCallbacks) {\n\t            this.connection.bind(event, this.connectionCallbacks[event]);\n\t        }\n\t        this.resetActivityCheck();\n\t    };\n\t    ;\n\t    ConnectionManager.prototype.abandonConnection = function () {\n\t        if (!this.connection) {\n\t            return;\n\t        }\n\t        this.stopActivityCheck();\n\t        for (var event in this.connectionCallbacks) {\n\t            this.connection.unbind(event, this.connectionCallbacks[event]);\n\t        }\n\t        var connection = this.connection;\n\t        this.connection = null;\n\t        return connection;\n\t    };\n\t    ConnectionManager.prototype.updateState = function (newState, data) {\n\t        var previousState = this.state;\n\t        this.state = newState;\n\t        if (previousState !== newState) {\n\t            var newStateDescription = newState;\n\t            if (newStateDescription === \"connected\") {\n\t                newStateDescription += \" with new socket ID \" + data.socket_id;\n\t            }\n\t            logger_1[\"default\"].debug('State changed', previousState + ' -> ' + newStateDescription);\n\t            this.timeline.info({ state: newState, params: data });\n\t            this.emit('state_change', { previous: previousState, current: newState });\n\t            this.emit(newState, data);\n\t        }\n\t    };\n\t    ConnectionManager.prototype.shouldRetry = function () {\n\t        return this.state === \"connecting\" || this.state === \"connected\";\n\t    };\n\t    return ConnectionManager;\n\t}(dispatcher_1[\"default\"]));\n\texports.__esModule = true;\n\texports[\"default\"] = ConnectionManager;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar factory_1 = __webpack_require__(43);\n\tvar Channels = (function () {\n\t    function Channels() {\n\t        this.channels = {};\n\t    }\n\t    Channels.prototype.add = function (name, pusher) {\n\t        if (!this.channels[name]) {\n\t            this.channels[name] = createChannel(name, pusher);\n\t        }\n\t        return this.channels[name];\n\t    };\n\t    Channels.prototype.all = function () {\n\t        return Collections.values(this.channels);\n\t    };\n\t    Channels.prototype.find = function (name) {\n\t        return this.channels[name];\n\t    };\n\t    Channels.prototype.remove = function (name) {\n\t        var channel = this.channels[name];\n\t        delete this.channels[name];\n\t        return channel;\n\t    };\n\t    Channels.prototype.disconnect = function () {\n\t        Collections.objectApply(this.channels, function (channel) {\n\t            channel.disconnect();\n\t        });\n\t    };\n\t    return Channels;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = Channels;\n\tfunction createChannel(name, pusher) {\n\t    if (name.indexOf('private-') === 0) {\n\t        return factory_1[\"default\"].createPrivateChannel(name, pusher);\n\t    }\n\t    else if (name.indexOf('presence-') === 0) {\n\t        return factory_1[\"default\"].createPresenceChannel(name, pusher);\n\t    }\n\t    else {\n\t        return factory_1[\"default\"].createChannel(name, pusher);\n\t    }\n\t}\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar factory_1 = __webpack_require__(43);\n\tvar util_1 = __webpack_require__(11);\n\tvar Errors = __webpack_require__(31);\n\tvar Collections = __webpack_require__(9);\n\tvar TransportStrategy = (function () {\n\t    function TransportStrategy(name, priority, transport, options) {\n\t        this.name = name;\n\t        this.priority = priority;\n\t        this.transport = transport;\n\t        this.options = options || {};\n\t    }\n\t    TransportStrategy.prototype.isSupported = function () {\n\t        return this.transport.isSupported({\n\t            encrypted: this.options.encrypted\n\t        });\n\t    };\n\t    TransportStrategy.prototype.connect = function (minPriority, callback) {\n\t        var _this = this;\n\t        if (!this.isSupported()) {\n\t            return failAttempt(new Errors.UnsupportedStrategy(), callback);\n\t        }\n\t        else if (this.priority < minPriority) {\n\t            return failAttempt(new Errors.TransportPriorityTooLow(), callback);\n\t        }\n\t        var connected = false;\n\t        var transport = this.transport.createConnection(this.name, this.priority, this.options.key, this.options);\n\t        var handshake = null;\n\t        var onInitialized = function () {\n\t            transport.unbind(\"initialized\", onInitialized);\n\t            transport.connect();\n\t        };\n\t        var onOpen = function () {\n\t            handshake = factory_1[\"default\"].createHandshake(transport, function (result) {\n\t                connected = true;\n\t                unbindListeners();\n\t                callback(null, result);\n\t            });\n\t        };\n\t        var onError = function (error) {\n\t            unbindListeners();\n\t            callback(error);\n\t        };\n\t        var onClosed = function () {\n\t            unbindListeners();\n\t            var serializedTransport;\n\t            serializedTransport = Collections.safeJSONStringify(transport);\n\t            callback(new Errors.TransportClosed(serializedTransport));\n\t        };\n\t        var unbindListeners = function () {\n\t            transport.unbind(\"initialized\", onInitialized);\n\t            transport.unbind(\"open\", onOpen);\n\t            transport.unbind(\"error\", onError);\n\t            transport.unbind(\"closed\", onClosed);\n\t        };\n\t        transport.bind(\"initialized\", onInitialized);\n\t        transport.bind(\"open\", onOpen);\n\t        transport.bind(\"error\", onError);\n\t        transport.bind(\"closed\", onClosed);\n\t        transport.initialize();\n\t        return {\n\t            abort: function () {\n\t                if (connected) {\n\t                    return;\n\t                }\n\t                unbindListeners();\n\t                if (handshake) {\n\t                    handshake.close();\n\t                }\n\t                else {\n\t                    transport.close();\n\t                }\n\t            },\n\t            forceMinPriority: function (p) {\n\t                if (connected) {\n\t                    return;\n\t                }\n\t                if (_this.priority < p) {\n\t                    if (handshake) {\n\t                        handshake.close();\n\t                    }\n\t                    else {\n\t                        transport.close();\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    };\n\t    return TransportStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = TransportStrategy;\n\tfunction failAttempt(error, callback) {\n\t    util_1[\"default\"].defer(function () {\n\t        callback(error);\n\t    });\n\t    return {\n\t        abort: function () { },\n\t        forceMinPriority: function () { }\n\t    };\n\t}\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar util_1 = __webpack_require__(11);\n\tvar timers_1 = __webpack_require__(12);\n\tvar SequentialStrategy = (function () {\n\t    function SequentialStrategy(strategies, options) {\n\t        this.strategies = strategies;\n\t        this.loop = Boolean(options.loop);\n\t        this.failFast = Boolean(options.failFast);\n\t        this.timeout = options.timeout;\n\t        this.timeoutLimit = options.timeoutLimit;\n\t    }\n\t    SequentialStrategy.prototype.isSupported = function () {\n\t        return Collections.any(this.strategies, util_1[\"default\"].method(\"isSupported\"));\n\t    };\n\t    SequentialStrategy.prototype.connect = function (minPriority, callback) {\n\t        var _this = this;\n\t        var strategies = this.strategies;\n\t        var current = 0;\n\t        var timeout = this.timeout;\n\t        var runner = null;\n\t        var tryNextStrategy = function (error, handshake) {\n\t            if (handshake) {\n\t                callback(null, handshake);\n\t            }\n\t            else {\n\t                current = current + 1;\n\t                if (_this.loop) {\n\t                    current = current % strategies.length;\n\t                }\n\t                if (current < strategies.length) {\n\t                    if (timeout) {\n\t                        timeout = timeout * 2;\n\t                        if (_this.timeoutLimit) {\n\t                            timeout = Math.min(timeout, _this.timeoutLimit);\n\t                        }\n\t                    }\n\t                    runner = _this.tryStrategy(strategies[current], minPriority, { timeout: timeout, failFast: _this.failFast }, tryNextStrategy);\n\t                }\n\t                else {\n\t                    callback(true);\n\t                }\n\t            }\n\t        };\n\t        runner = this.tryStrategy(strategies[current], minPriority, { timeout: timeout, failFast: this.failFast }, tryNextStrategy);\n\t        return {\n\t            abort: function () {\n\t                runner.abort();\n\t            },\n\t            forceMinPriority: function (p) {\n\t                minPriority = p;\n\t                if (runner) {\n\t                    runner.forceMinPriority(p);\n\t                }\n\t            }\n\t        };\n\t    };\n\t    SequentialStrategy.prototype.tryStrategy = function (strategy, minPriority, options, callback) {\n\t        var timer = null;\n\t        var runner = null;\n\t        if (options.timeout > 0) {\n\t            timer = new timers_1.OneOffTimer(options.timeout, function () {\n\t                runner.abort();\n\t                callback(true);\n\t            });\n\t        }\n\t        runner = strategy.connect(minPriority, function (error, handshake) {\n\t            if (error && timer && timer.isRunning() && !options.failFast) {\n\t                return;\n\t            }\n\t            if (timer) {\n\t                timer.ensureAborted();\n\t            }\n\t            callback(error, handshake);\n\t        });\n\t        return {\n\t            abort: function () {\n\t                if (timer) {\n\t                    timer.ensureAborted();\n\t                }\n\t                runner.abort();\n\t            },\n\t            forceMinPriority: function (p) {\n\t                runner.forceMinPriority(p);\n\t            }\n\t        };\n\t    };\n\t    return SequentialStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = SequentialStrategy;\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Collections = __webpack_require__(9);\n\tvar util_1 = __webpack_require__(11);\n\tvar BestConnectedEverStrategy = (function () {\n\t    function BestConnectedEverStrategy(strategies) {\n\t        this.strategies = strategies;\n\t    }\n\t    BestConnectedEverStrategy.prototype.isSupported = function () {\n\t        return Collections.any(this.strategies, util_1[\"default\"].method(\"isSupported\"));\n\t    };\n\t    BestConnectedEverStrategy.prototype.connect = function (minPriority, callback) {\n\t        return connect(this.strategies, minPriority, function (i, runners) {\n\t            return function (error, handshake) {\n\t                runners[i].error = error;\n\t                if (error) {\n\t                    if (allRunnersFailed(runners)) {\n\t                        callback(true);\n\t                    }\n\t                    return;\n\t                }\n\t                Collections.apply(runners, function (runner) {\n\t                    runner.forceMinPriority(handshake.transport.priority);\n\t                });\n\t                callback(null, handshake);\n\t            };\n\t        });\n\t    };\n\t    return BestConnectedEverStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = BestConnectedEverStrategy;\n\tfunction connect(strategies, minPriority, callbackBuilder) {\n\t    var runners = Collections.map(strategies, function (strategy, i, _, rs) {\n\t        return strategy.connect(minPriority, callbackBuilder(i, rs));\n\t    });\n\t    return {\n\t        abort: function () {\n\t            Collections.apply(runners, abortRunner);\n\t        },\n\t        forceMinPriority: function (p) {\n\t            Collections.apply(runners, function (runner) {\n\t                runner.forceMinPriority(p);\n\t            });\n\t        }\n\t    };\n\t}\n\tfunction allRunnersFailed(runners) {\n\t    return Collections.all(runners, function (runner) {\n\t        return Boolean(runner.error);\n\t    });\n\t}\n\tfunction abortRunner(runner) {\n\t    if (!runner.error && !runner.aborted) {\n\t        runner.abort();\n\t        runner.aborted = true;\n\t    }\n\t}\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar util_1 = __webpack_require__(11);\n\tvar runtime_1 = __webpack_require__(2);\n\tvar sequential_strategy_1 = __webpack_require__(57);\n\tvar Collections = __webpack_require__(9);\n\tvar CachedStrategy = (function () {\n\t    function CachedStrategy(strategy, transports, options) {\n\t        this.strategy = strategy;\n\t        this.transports = transports;\n\t        this.ttl = options.ttl || 1800 * 1000;\n\t        this.encrypted = options.encrypted;\n\t        this.timeline = options.timeline;\n\t    }\n\t    CachedStrategy.prototype.isSupported = function () {\n\t        return this.strategy.isSupported();\n\t    };\n\t    CachedStrategy.prototype.connect = function (minPriority, callback) {\n\t        var encrypted = this.encrypted;\n\t        var info = fetchTransportCache(encrypted);\n\t        var strategies = [this.strategy];\n\t        if (info && info.timestamp + this.ttl >= util_1[\"default\"].now()) {\n\t            var transport = this.transports[info.transport];\n\t            if (transport) {\n\t                this.timeline.info({\n\t                    cached: true,\n\t                    transport: info.transport,\n\t                    latency: info.latency\n\t                });\n\t                strategies.push(new sequential_strategy_1[\"default\"]([transport], {\n\t                    timeout: info.latency * 2 + 1000,\n\t                    failFast: true\n\t                }));\n\t            }\n\t        }\n\t        var startTimestamp = util_1[\"default\"].now();\n\t        var runner = strategies.pop().connect(minPriority, function cb(error, handshake) {\n\t            if (error) {\n\t                flushTransportCache(encrypted);\n\t                if (strategies.length > 0) {\n\t                    startTimestamp = util_1[\"default\"].now();\n\t                    runner = strategies.pop().connect(minPriority, cb);\n\t                }\n\t                else {\n\t                    callback(error);\n\t                }\n\t            }\n\t            else {\n\t                storeTransportCache(encrypted, handshake.transport.name, util_1[\"default\"].now() - startTimestamp);\n\t                callback(null, handshake);\n\t            }\n\t        });\n\t        return {\n\t            abort: function () {\n\t                runner.abort();\n\t            },\n\t            forceMinPriority: function (p) {\n\t                minPriority = p;\n\t                if (runner) {\n\t                    runner.forceMinPriority(p);\n\t                }\n\t            }\n\t        };\n\t    };\n\t    return CachedStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = CachedStrategy;\n\tfunction getTransportCacheKey(encrypted) {\n\t    return \"pusherTransport\" + (encrypted ? \"Encrypted\" : \"Unencrypted\");\n\t}\n\tfunction fetchTransportCache(encrypted) {\n\t    var storage = runtime_1[\"default\"].getLocalStorage();\n\t    if (storage) {\n\t        try {\n\t            var serializedCache = storage[getTransportCacheKey(encrypted)];\n\t            if (serializedCache) {\n\t                return JSON.parse(serializedCache);\n\t            }\n\t        }\n\t        catch (e) {\n\t            flushTransportCache(encrypted);\n\t        }\n\t    }\n\t    return null;\n\t}\n\tfunction storeTransportCache(encrypted, transport, latency) {\n\t    var storage = runtime_1[\"default\"].getLocalStorage();\n\t    if (storage) {\n\t        try {\n\t            storage[getTransportCacheKey(encrypted)] = Collections.safeJSONStringify({\n\t                timestamp: util_1[\"default\"].now(),\n\t                transport: transport,\n\t                latency: latency\n\t            });\n\t        }\n\t        catch (e) {\n\t        }\n\t    }\n\t}\n\tfunction flushTransportCache(encrypted) {\n\t    var storage = runtime_1[\"default\"].getLocalStorage();\n\t    if (storage) {\n\t        try {\n\t            delete storage[getTransportCacheKey(encrypted)];\n\t        }\n\t        catch (e) {\n\t        }\n\t    }\n\t}\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar timers_1 = __webpack_require__(12);\n\tvar DelayedStrategy = (function () {\n\t    function DelayedStrategy(strategy, _a) {\n\t        var number = _a.delay;\n\t        this.strategy = strategy;\n\t        this.options = { delay: number };\n\t    }\n\t    DelayedStrategy.prototype.isSupported = function () {\n\t        return this.strategy.isSupported();\n\t    };\n\t    DelayedStrategy.prototype.connect = function (minPriority, callback) {\n\t        var strategy = this.strategy;\n\t        var runner;\n\t        var timer = new timers_1.OneOffTimer(this.options.delay, function () {\n\t            runner = strategy.connect(minPriority, callback);\n\t        });\n\t        return {\n\t            abort: function () {\n\t                timer.ensureAborted();\n\t                if (runner) {\n\t                    runner.abort();\n\t                }\n\t            },\n\t            forceMinPriority: function (p) {\n\t                minPriority = p;\n\t                if (runner) {\n\t                    runner.forceMinPriority(p);\n\t                }\n\t            }\n\t        };\n\t    };\n\t    return DelayedStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = DelayedStrategy;\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar IfStrategy = (function () {\n\t    function IfStrategy(test, trueBranch, falseBranch) {\n\t        this.test = test;\n\t        this.trueBranch = trueBranch;\n\t        this.falseBranch = falseBranch;\n\t    }\n\t    IfStrategy.prototype.isSupported = function () {\n\t        var branch = this.test() ? this.trueBranch : this.falseBranch;\n\t        return branch.isSupported();\n\t    };\n\t    IfStrategy.prototype.connect = function (minPriority, callback) {\n\t        var branch = this.test() ? this.trueBranch : this.falseBranch;\n\t        return branch.connect(minPriority, callback);\n\t    };\n\t    return IfStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = IfStrategy;\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar FirstConnectedStrategy = (function () {\n\t    function FirstConnectedStrategy(strategy) {\n\t        this.strategy = strategy;\n\t    }\n\t    FirstConnectedStrategy.prototype.isSupported = function () {\n\t        return this.strategy.isSupported();\n\t    };\n\t    FirstConnectedStrategy.prototype.connect = function (minPriority, callback) {\n\t        var runner = this.strategy.connect(minPriority, function (error, handshake) {\n\t            if (handshake) {\n\t                runner.abort();\n\t            }\n\t            callback(error, handshake);\n\t        });\n\t        return runner;\n\t    };\n\t    return FirstConnectedStrategy;\n\t}());\n\texports.__esModule = true;\n\texports[\"default\"] = FirstConnectedStrategy;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar defaults_1 = __webpack_require__(5);\n\texports.getGlobalConfig = function () {\n\t    return {\n\t        wsHost: defaults_1[\"default\"].host,\n\t        wsPort: defaults_1[\"default\"].ws_port,\n\t        wssPort: defaults_1[\"default\"].wss_port,\n\t        wsPath: defaults_1[\"default\"].ws_path,\n\t        httpHost: defaults_1[\"default\"].sockjs_host,\n\t        httpPort: defaults_1[\"default\"].sockjs_http_port,\n\t        httpsPort: defaults_1[\"default\"].sockjs_https_port,\n\t        httpPath: defaults_1[\"default\"].sockjs_path,\n\t        statsHost: defaults_1[\"default\"].stats_host,\n\t        authEndpoint: defaults_1[\"default\"].channel_auth_endpoint,\n\t        authTransport: defaults_1[\"default\"].channel_auth_transport,\n\t        activity_timeout: defaults_1[\"default\"].activity_timeout,\n\t        pong_timeout: defaults_1[\"default\"].pong_timeout,\n\t        unavailable_timeout: defaults_1[\"default\"].unavailable_timeout\n\t    };\n\t};\n\texports.getClusterConfig = function (clusterName) {\n\t    return {\n\t        wsHost: \"ws-\" + clusterName + \".pusher.com\",\n\t        httpHost: \"sockjs-\" + clusterName + \".pusher.com\"\n\t    };\n\t};\n\n\n/***/ })\n/******/ ])\n});\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///185\n");

/***/ })

/******/ });